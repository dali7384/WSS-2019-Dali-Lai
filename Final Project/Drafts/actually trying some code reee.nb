(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    348580,       7656]
NotebookOptionsPosition[    329675,       7352]
NotebookOutlinePosition[    330343,       7375]
CellTagsIndexPosition[    330237,       7370]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<Benchmarking`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771174295191061*^9, 3.771174325718427*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"f76ab152-92cc-4b6e-9396-8afea16bbe9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BenchmarkReport", "[", "]"}]], "Input",
 CellChangeTimes->{{3.771174329325781*^9, 3.771174343136849*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"00eeb7c6-fa00-4b2a-81f2-9b614331d6fc"],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["4hga6_shm", 3, 1]],50,
   "FrontEndObject[LinkObject[\"4hga6_shm\", 3, 1]]","50",
   "\"WolframMark Report\""},
  "NotebookObjectUnsaved"]], "Output",
 CellChangeTimes->{3.771174353926995*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"005eeac0-94d1-4ba9-9500-4cfbf5f190a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CPUUUUUuUUUUUUuuuwuwuuuuwuuuww", "Section",
 CellChangeTimes->{{3.7712068576892567`*^9, 3.771206858467177*^9}, {
  3.7712484675239353`*^9, 
  3.7712484781525126`*^9}},ExpressionUUID->"df8a70f5-72b4-40bb-a0f7-\
ab877646edac"],

Cell["\<\
If paralleldo is much faster than do or almost the same, take paralleldo : do \
= 7 : 3
Cuz for my understanding, one benifits much more for multi core, and one \
benifits much more for high frequency per core, no? 

if parado slower than do, take only do




\
\>", "CodeText",
 CellChangeTimes->{{3.771245625622096*^9, 3.7712456925042453`*^9}, {
  3.7712458957182217`*^9, 3.771245910738105*^9}, {3.771246348702883*^9, 
  3.7712463935160465`*^9}, {3.7713615381392164`*^9, 3.771361539089182*^9}, {
  3.77159923457473*^9, 
  3.7715992368748846`*^9}},ExpressionUUID->"78f61fd7-0e12-4a4b-9418-\
7fa1a0e5ae44"],

Cell[CellGroupData[{

Cell[BoxData["CloseKernels"], "Input",
 CellChangeTimes->{{3.771599238463669*^9, 3.771599260128235*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"0cee8023-e313-464f-8bf8-02b426b13407"],

Cell[BoxData["CloseKernels"], "Output",
 CellChangeTimes->{{3.7715992428282037`*^9, 3.771599260485279*^9}},
 CellLabel->"Out[78]=",ExpressionUUID->"ae4bcd55-b908-45ad-93e0-d09898a50d73"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"Timer", ",", 
    RowBox[{"{", "HoldAll", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SinglePrimee", "[", "a_", "]"}], " ", ":=", " ", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PrimeQ", "[", "q", "]"}], " ", "==", " ", "True"}], ",", " ",
        "1", ",", " ", "0"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"q", ",", " ", "0", ",", " ", "a"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ParaPrime", "[", "a_", "]"}], " ", ":=", " ", 
   RowBox[{"ParallelDo", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PrimeQ", "[", "q", "]"}], " ", "==", " ", "True"}], ",", " ",
        "1", ",", " ", "0"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"q", ",", " ", "0", ",", " ", "a"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Timer", "[", "expr_", "]"}], " ", ":=", "\[IndentingNewLine]", 
   "  ", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", "  ", 
    RowBox[{
     RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", "  ", 
     RowBox[{
      RowBox[{"ClearSystemCache", "[", "]"}], ";", "\[IndentingNewLine]", 
      "  ", 
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"AbsoluteTiming", "[", "expr", "]"}]}], ";", "\n", "  ", 
      RowBox[{"Return", "[", 
       RowBox[{"result", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", " ",
     "]"}]}], ";"}]}], "Code",
 InitializationCell->True,
 CellChangeTimes->{
  3.771597747106762*^9, {3.7715988898052826`*^9, 3.771598892005801*^9}, {
   3.771599145026553*^9, 3.7715991533252087`*^9}, {3.77159922408582*^9, 
   3.7715992259754767`*^9}, {3.7715992726459975`*^9, 3.7715992728225613`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4d0eb703-1a48-46d2-8abc-78de3609c6d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TestSet", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", "\n", 
      RowBox[{
      "FindPI", ",", " ", "SinFindPrime", ",", " ", "ParaFindPrime", ",", " ", 
       RowBox[{"Amountofpi", " ", "=", " ", 
        RowBox[{"10", "^", "7.5"}]}], ",", " ", "newtonIteration", ",", " ", 
       "CompileTIme", ",", "\n", "EigenTimePara", ",", " ", "EigenTimeSing", 
       ",", " ", "LinearSysSing", ",", " ", "LinearSysPara", ",", " ", 
       "TransposeTime", ",", " ", "\n", "RandomsortPara", ",", " ", 
       "RandomsortSing", ",", " ", "Render3Dtime", ",", " ", "NSloveTimePara",
        ",", " ", "NSloveTimeSingle"}], "\n", "}"}], ",", "\n", "\n", "  ", 
     RowBox[{
      RowBox[{"FindPI", " ", "=", " ", 
       RowBox[{"Timer", "[", 
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"\[Pi]", ",", " ", "10000000"}], "]"}], ";"}], "]"}]}], ";",
       "\n", "  ", 
      RowBox[{"SinFindPrime", " ", "=", " ", 
       RowBox[{"Timer", "[", 
        RowBox[{
         RowBox[{"SinglePrimee", "[", "Amountofpi", "]"}], ";"}], "]"}]}], 
      ";", "\n", "  ", 
      RowBox[{"ParaFindPrime", " ", "=", " ", 
       RowBox[{"Timer", "[", 
        RowBox[{
         RowBox[{"ParaPrime", "[", "Amountofpi", "]"}], ";"}], "]"}]}], ";", 
      "\n", "     ", 
      RowBox[{"newtonIteration", " ", "=", " ", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"z", ",", " ", "_Complex"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"n", ",", " ", "_Integer"}], "}"}]}], "}"}], ",", " ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"zn", " ", "=", " ", "z"}], "}"}], ",", " ", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"zn", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", " ", "zn"}], " ", "+", " ", 
                  RowBox[{"1", "/", 
                   RowBox[{"zn", "^", "2"}]}]}], ")"}], "/", "3"}]}], ",", 
              " ", 
              RowBox[{"{", "n", "}"}]}], "]"}], ";", "\n", "        ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Re", "[", "zn", "]"}], " ", ">", " ", "0"}], ",", " ",
               "1", ",", " ", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Im", "[", "zn", "]"}], " ", ">", " ", "0"}], ",", 
                " ", "2", ",", " ", "3"}], "]"}]}], "]"}]}]}], "]"}], ",", 
         " ", 
         RowBox[{"RuntimeAttributes", " ", "->", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", " ", 
         RowBox[{"Parallelization", " ", "->", " ", "True"}]}], "]"}]}], ";", 
      "\n", "  ", 
      RowBox[{"CompileTIme", " ", "=", " ", 
       RowBox[{"Timer", "[", 
        RowBox[{"ArrayPlot", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"newtonIteration", "[", 
            RowBox[{
             RowBox[{"x", " ", "+", " ", 
              RowBox[{"I", "*", "y"}]}], ",", " ", "25"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", " ", 
             RowBox[{"-", "5"}], ",", " ", "5", ",", " ", 
             RowBox[{"2.", "/", "199"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", " ", 
             RowBox[{"-", "5"}], ",", " ", "5", ",", " ", 
             RowBox[{"2.", "/", "199"}]}], "}"}]}], "]"}], "]"}], "]"}]}], 
      ";", "\n", "  ", "\n", "  ", 
      RowBox[{"EigenTimePara", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b", ",", " ", "m"}], "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"1500", ",", " ", "1500"}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"b", " ", "=", " ", 
            RowBox[{"DiagonalMatrix", "[", 
             RowBox[{"RandomReal", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", " ", 
               RowBox[{"{", "1500", "}"}]}], "]"}], "]"}]}], ";", " ", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"a", ".", "b", ".", 
             RowBox[{"Inverse", "[", "a", "]"}]}]}], ";", " ", "\n", 
           "                  ", 
           RowBox[{"ParallelDo", "[", 
            RowBox[{
             RowBox[{"Eigenvalues", "[", "m", "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"EigenTimeSing", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b", ",", " ", "m"}], "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"1500", ",", " ", "1500"}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"b", " ", "=", " ", 
            RowBox[{"DiagonalMatrix", "[", 
             RowBox[{"RandomReal", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", " ", 
               RowBox[{"{", "1500", "}"}]}], "]"}], "]"}]}], ";", " ", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"a", ".", "b", ".", 
             RowBox[{"Inverse", "[", "a", "]"}]}]}], ";", " ", "\n", 
           "                  ", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"Eigenvalues", "[", "m", "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"LinearSysSing", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", ",", " ", "v"}], "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"5000", ",", " ", "5000"}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"v", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", "5000", "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"LinearSolve", "[", 
              RowBox[{"m", ",", " ", "v"}], "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"LinearSysPara", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", ",", " ", "v"}], "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"5000", ",", " ", "5000"}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"v", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", "5000", "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"ParallelDo", "[", 
            RowBox[{
             RowBox[{"LinearSolve", "[", 
              RowBox[{"m", ",", " ", "v"}], "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"TransposeTime", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "m", "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"8000", ",", " ", "8000"}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", "m", "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"RandomsortPara", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"RandomInteger", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", " ", 
                RowBox[{"10", "^", "10"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"3", "*", 
                RowBox[{"10", "^", "6"}]}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"ParallelDo", "[", 
            RowBox[{
             RowBox[{"Sort", "[", "a", "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"RandomsortSing", " ", "=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", " ", 
         RowBox[{"Timer", "[", 
          RowBox[{
           RowBox[{"SeedRandom", "[", "1", "]"}], ";", " ", 
           RowBox[{"a", " ", "=", " ", 
            RowBox[{"RandomInteger", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", " ", 
                RowBox[{"10", "^", "10"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"3", "*", 
                RowBox[{"10", "^", "6"}]}], "}"}]}], "]"}]}], ";", " ", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"Sort", "[", "a", "]"}], ",", " ", 
             RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";", "\n",
       "  ", 
      RowBox[{"Render3Dtime", " ", "=", " ", 
       RowBox[{
        RowBox[{"RepeatedTiming", "[", 
         RowBox[{
          RowBox[{"SphericalPlot3D", "[", 
           RowBox[{
            RowBox[{"1", " ", "+", " ", 
             RowBox[{
              RowBox[{"Sin", "[", 
               RowBox[{"5", " ", "\[Phi]"}], "]"}], " ", 
              RowBox[{
               RowBox[{"Sin", "[", 
                RowBox[{"10", " ", "\[Theta]"}], "]"}], "/", "10"}]}]}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"\[Theta]", ",", " ", "0", ",", " ", 
              RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"\[Phi]", ",", " ", "0", ",", " ", 
              RowBox[{"4", " ", "\[Pi]"}]}], "}"}], ",", " ", 
            RowBox[{"ColorFunction", " ", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], "[", "#6",
                 "]"}], " ", "&"}], ")"}]}], ",", " ", "\n", 
            "                 ", 
            RowBox[{"Mesh", " ", "->", " ", "None"}], ",", " ", 
            RowBox[{"PlotPoints", " ", "->", " ", "200"}], ",", " ", 
            RowBox[{"Boxed", " ", "->", " ", "False"}], ",", " ", 
            RowBox[{"Axes", " ", "->", " ", "False"}]}], "]"}], ";"}], "]"}], 
        "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "  ", 
      RowBox[{"NSloveTimePara", " ", "=", " ", 
       RowBox[{
        RowBox[{"RepeatedTiming", "[", 
         RowBox[{"Parallelize", "[", 
          RowBox[{
           RowBox[{"NSolve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Sin", "[", 
                RowBox[{"z", " ", "+", " ", 
                 RowBox[{"Sin", "[", 
                  RowBox[{"z", " ", "+", " ", 
                   RowBox[{"Sin", "[", "z", "]"}]}], "]"}]}], "]"}], " ", "==",
                " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"z", " ", "+", " ", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"z", " ", "+", " ", 
                   RowBox[{"Cos", "[", "z", "]"}]}], "]"}]}], "]"}]}], " ", "&&",
               " ", 
              RowBox[{
               RowBox[{"-", "2"}], " ", "<", " ", 
               RowBox[{"Re", "[", "z", "]"}], " ", "<", " ", "2"}], " ", "&&",
               " ", 
              RowBox[{
               RowBox[{"-", "2"}], " ", "<", " ", 
               RowBox[{"Im", "[", "z", "]"}], " ", "<", " ", "2"}]}], ",", 
             " ", "z"}], "]"}], ";"}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "  ", 
      RowBox[{"NSloveTimeSingle", " ", "=", " ", 
       RowBox[{
        RowBox[{"RepeatedTiming", "[", 
         RowBox[{
          RowBox[{"NSolve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Sin", "[", 
               RowBox[{"z", " ", "+", " ", 
                RowBox[{"Sin", "[", 
                 RowBox[{"z", " ", "+", " ", 
                  RowBox[{"Sin", "[", "z", "]"}]}], "]"}]}], "]"}], " ", "==",
               " ", 
              RowBox[{"Cos", "[", 
               RowBox[{"z", " ", "+", " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{"z", " ", "+", " ", 
                  RowBox[{"Cos", "[", "z", "]"}]}], "]"}]}], "]"}]}], " ", "&&",
              " ", 
             RowBox[{
              RowBox[{"-", "2"}], " ", "<", " ", 
              RowBox[{"Re", "[", "z", "]"}], " ", "<", " ", "2"}], " ", "&&", 
             " ", 
             RowBox[{
              RowBox[{"-", "2"}], " ", "<", " ", 
              RowBox[{"Im", "[", "z", "]"}], " ", "<", " ", "2"}]}], ",", " ",
             "z"}], "]"}], ";"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "  ", "\n", "  ", "\n", 
      "  ", "\n", "  ", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<PITime\>\"", " ", "\[Rule]", " ", "FindPI"}], ",", " ", 
        RowBox[{
        "\"\<FindPrimeSingle\>\"", " ", "\[Rule]", " ", "SinFindPrime"}], ",",
         " ", "\n", "  ", 
        RowBox[{
        "\"\<FindPrimePara\>\"", " ", "\[Rule]", " ", "ParaFindPrime"}], ",", 
        " ", "\n", "  ", 
        RowBox[{"\"\<CompileTime\>\"", " ", "\[Rule]", " ", "CompileTIme"}], 
        ",", " ", "\n", "  ", 
        RowBox[{
        "\"\<EigenTimePara\>\"", " ", "\[Rule]", " ", "EigenTimePara"}], ",", 
        " ", "\n", "  ", 
        RowBox[{
        "\"\<EigenTimeSingle\>\"", " ", "\[Rule]", " ", "EigenTimeSing"}], 
        ",", " ", 
        RowBox[{
        "\"\<LinearSystemSingle\>\"", " ", "\[Rule]", " ", "LinearSysSing"}], 
        ",", " ", "\n", "  ", 
        RowBox[{
        "\"\<LinearSystemPara\>\"", " ", "\[Rule]", " ", "LinearSysPara"}], 
        ",", " ", 
        RowBox[{
        "\"\<TransposeTime\>\"", " ", "\[Rule]", " ", "TransposeTime"}], ",", 
        " ", "\n", "  ", 
        RowBox[{
        "\"\<SortRandomPara\>\"", " ", "\[Rule]", " ", "RandomsortPara"}], 
        ",", " ", 
        RowBox[{
        "\"\<SortRandomSingle\>\"", " ", "\[Rule]", " ", "RandomsortSing"}], 
        ",", " ", "\n", "  ", 
        RowBox[{"\"\<Render3DTime\>\"", " ", "\[Rule]", " ", "Render3Dtime"}],
         ",", " ", 
        RowBox[{
        "\"\<NSloveTimePara\>\"", " ", "\[Rule]", " ", "NSloveTimePara"}], 
        ",", " ", "\n", "  ", 
        RowBox[{
        "\"\<NSloveTimeSingle\>\"", " ", "\[Rule]", " ", 
         "NSloveTimeSingle"}]}], "|>"}]}]}], "\n", "  ", "]"}]}], 
  "\n"}]], "Code",
 CellChangeTimes->{{3.7713615400623584`*^9, 3.7713615489521008`*^9}, {
   3.7713615793638687`*^9, 3.771361874235015*^9}, {3.771362077549576*^9, 
   3.7713620790485644`*^9}, {3.7713623237522535`*^9, 
   3.7713623271808815`*^9}, {3.7715712566588106`*^9, 
   3.7715712665929575`*^9}, {3.7715975080477715`*^9, 
   3.7715976036593285`*^9}, {3.7715976754607677`*^9, 3.771597739205172*^9}, {
   3.7715977841091413`*^9, 3.7715977867168713`*^9}, {3.7715978668888645`*^9, 
   3.7715979064622917`*^9}, {3.7715979373897743`*^9, 3.77159803231557*^9}, {
   3.771598078247665*^9, 3.771598147949552*^9}, {3.771598224065366*^9, 
   3.771598301741255*^9}, {3.7715983860629044`*^9, 3.7715988027686763`*^9}, 
   3.771598887191867*^9, 3.7715991389279685`*^9, {3.77159927908685*^9, 
   3.7715992815833626`*^9}, {3.77159933010259*^9, 3.771599330424759*^9}, {
   3.771599522575194*^9, 3.7715995329461107`*^9}, {3.7715998399663653`*^9, 
   3.7715998442442827`*^9}, 3.771601403776687*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"359f8fb7-2af2-412b-aec3-f34498817884"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Score", "[", "t_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "900"}], "*", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"0.02", "*", "t"}], "]"}]}], "+", "900"}]}], ";"}]], "Code",
 CellChangeTimes->{
  3.771598185382491*^9, {3.7715998927549047`*^9, 3.771599973437235*^9}, {
   3.7716007401211767`*^9, 3.771600740390457*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"92f0f4cb-9f24-4316-ab1d-1c3c0511100a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "900"}], "*", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"0.02", "x"}], "]"}]}], "+", "900"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "50"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7716006327884917`*^9, 3.771600640038849*^9}, {
  3.7716007200372167`*^9, 3.771600720418197*^9}, {3.7716009638471956`*^9, 
  3.7716009642649765`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"3062a4e5-2a1f-401a-b2c3-cc1ed298b0ff"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVjms01HkAhkcJ7UnbbZdaoUktkkyEXJrXFP5d5FIJbRLhN24N41pkxq3B
bHKrdt3vxdlGZKMaVjGNsaWdsmfFJm2F3Uo7kZCs/fCe5zxfnvOu8z3p5r+A
RqM5ze9/0rNmK4q1r+3okHh/mNMR4oaagU4oyWIKPx68LFsrRHvs1Up9UsKs
p7t55X8jhMQkPFCFiJifkNBqqCGEVCinJgLbmCPdnoJDS4XoskpueR3Yw2xg
2evXfcqELLs/fCRwkJlQ9lOXe18m9ohV978KHGNuK+nTvJaTifvq5ouVj9LA
CPjudslUBlhZ9r/UOKuhYHjw97GgDPhvmVZnqC+Dpk047/hgOpwM/P/92nEV
cqk20wQqHQ2PE6K6LDXxo3Btlu1tAaxXGIqUE7WgtLB8/ZyeAIEzOUVVHrqI
eHhJ7Jt9Ficlw6YiJzo47Z42eWpnkeGlsmE2RA+bpQ7uTlFp8Lt3OoBBNqI6
YdPS0depaFdd7RrsqQ+VE6TbhaSCsZx3YTTSEE7R2qPSvhT4vLc12h9ihD8f
xLB03FNQVtypNfm9MXKMKdGYNBmN56z65W4mWGLnYzTBTEbkTVuXon0MFDj8
sbWlPQltsipF+pGtaL4e45tqlQS243Yx28MUG2fz5mbEfBReZjQFB5lh9o1/
10tLPrLfi/mcmG2oDLeo1W/m4VVtVDSJMEfRzdK3PXY8dDjkXEpKsoDGnhHF
X2mJUHJ+8jyLZ4kXzL1vSorPgGb3s1Jp3HZEKvNFoa0JEGhMOsnPWuHN1LTR
pp54cLz87kwmW8Oaq5Fd9v40hvhmJ5j5NvANTZJIF5/GqtwfnqSX2UKFHHD2
0j+F6mWGcfcKdqD+7aplMs84tEfo2H9bx4Rz09bDPQmxKNYt1bI9CPhELd1g
fT0G4vhpGnkIrFmoENMV0Vi3V/XT+sN2kNdMCcPWR+N6j0Fm32M77CmvbDQP
iIJQ8tlE9ygL5agoXFQUiVzuaJDPAAuxT0WfH7zgIv4r7S/pnjuh/Cyr66Ip
F1cMFskin+0Ex+xvrlZMBFTGlVa3e+/CdC8UtbJw1JhcO1M8vAuld6dyU1eG
w8C3dv9sqD08ntNuh/hx0L+7peHQP/bgiDaY9KachLzi1GYm1wHj3LxHV4zD
8LHR1YaucEBpt35O3UQI5pojmtLCHKEpbx7vlAZjr4mDffyEI14P9vP7BEG4
d3QLO5hLQa13ON/9BBsr/MitoigKKfcn4ncfY8OblKk/jKHQ4Zjfa+PFxoeI
lQ1m8RSUW4/367mwoSeYnJ5NoRCSo2M5bc0Gr6FNeP4ChdK0qs03V7JhpepS
39RCwWMmo+PcXYK0JekLRm5RMMockmW1Evy2/M7BNa0U8lyz7bJbCIiW2dSZ
OxTqub2J+SKCiwxNFtVNYaDy6Y6KAoLxI88ePRmgoHWA3fqIS4DjqzeqD1LQ
5Ld19ocRZAa4xTKH5nvVcpsXbAJ6eIdW5UsK4xK1Ux+OEbimXfYPfUuB9rJ8
i+4+gsLMoRsl7+b/uvc0bnIkGDm/5gu5goJuUVCNBYuAVyC8aj5JwfKiZMDF
kuDX0k4ae4rCx3autrcpgUb1Z7eCmXkXkZ5gYwLfOouq+7MUpIUFY3EGBFfr
OZNzcxTe3V2QKNAj+A9Evzv+
       "]]},
     Annotation[#, "Charting`Private`Tag$3183#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7716006261623435`*^9, 3.7716006406232853`*^9}, 
   3.7716007209898024`*^9, 3.7716009648677363`*^9, 3.771601415561657*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"df492004-9182-4fa6-9004-e4c089c392f9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"CPUScore", ":=", " ", 
  RowBox[{"(", "\n", 
   RowBox[{
    RowBox[{"CPUTestResult", "=", 
     RowBox[{"TestSet", "[", "]"}]}], ";", "\n", 
    RowBox[{
     RowBox[{"Score", "[", 
      RowBox[{"CPUTestResult", "[", "\"\<PITime\>\"", "]"}], "]"}], "+", "\n",
      "\n", 
     FractionBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"3", "*", 
         RowBox[{"Score", "[", 
          RowBox[{"CPUTestResult", "[", "\"\<FindPrimeSingle\>\"", "]"}], 
          "]"}]}], "+", 
        RowBox[{"7", "*", 
         RowBox[{"Score", "[", 
          RowBox[{"CPUTestResult", "[", "\"\<FindPrimePara\>\"", "]"}], 
          "]"}]}]}], ")"}], "10"], "+", "\n", 
     RowBox[{"Score", "[", 
      RowBox[{"CPUTestResult", "[", "\"\<CompileTime\>\"", "]"}], "]"}], "+", 
     "\n", "\n", 
     FractionBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"3", "*", 
         RowBox[{"Score", "[", 
          RowBox[{"CPUTestResult", "[", "\"\<EigenTimeSingle\>\"", "]"}], 
          "]"}]}], "+", 
        RowBox[{"7", "*", 
         RowBox[{"Score", "[", 
          RowBox[{"CPUTestResult", "[", "\"\<EigenTimePara\>\"", "]"}], 
          "]"}]}]}], ")"}], "10"], "+", "\n", 
     FractionBox[
      RowBox[{
       RowBox[{"Score", "[", 
        RowBox[{"CPUTestResult", "[", "\"\<LinearSystemSingle\>\"", "]"}], 
        "]"}], "+", 
       RowBox[{"Score", "[", 
        RowBox[{"CPUTestResult", "[", "\"\<LinearSystemPara\>\"", "]"}], 
        "]"}]}], "2"], "+", "\n", 
     RowBox[{"Score", "[", 
      RowBox[{"CPUTestResult", "[", "\"\<TransposeTime\>\"", "]"}], "]"}], 
     "+", "\n", "\n", 
     FractionBox[
      RowBox[{
       RowBox[{"7", "*", 
        RowBox[{"Score", "[", 
         RowBox[{"CPUTestResult", "[", "\"\<SortRandomPara\>\"", "]"}], 
         "]"}]}], "+", 
       RowBox[{"3", "*", 
        RowBox[{"Score", "[", 
         RowBox[{"CPUTestResult", "[", "\"\<SortRandomSingle\>\"", "]"}], 
         "]"}]}]}], "10"], "+", "\n", "\n", 
     RowBox[{"1.5", "*", 
      RowBox[{"Score", "[", 
       RowBox[{"CPUTestResult", "[", "\"\<Render3DTime\>\"", "]"}], "]"}]}], 
     "+", "\n", "\n", 
     FractionBox[
      RowBox[{
       RowBox[{"7", "*", 
        RowBox[{"Score", "[", 
         RowBox[{"CPUTestResult", "[", "\"\<NSloveTimePara\>\"", "]"}], 
         "]"}]}], "+", 
       RowBox[{"3", "*", 
        RowBox[{"Score", "[", 
         RowBox[{"CPUTestResult", "[", "\"\<NSloveTimeSingle\>\"", "]"}], 
         "]"}]}]}], "10"]}]}], ")"}]}]], "Code",
 CellChangeTimes->{{3.771359451147581*^9, 3.7713594563097773`*^9}, {
   3.771361164706647*^9, 3.7713611929363546`*^9}, {3.7713614842808404`*^9, 
   3.771361501163065*^9}, {3.7713623949640074`*^9, 3.7713624997412567`*^9}, {
   3.771362720404062*^9, 3.771362764397399*^9}, {3.7713629315323257`*^9, 
   3.771363151839126*^9}, 3.771364305107139*^9, {3.771597463788352*^9, 
   3.771597487390707*^9}, {3.7715998556161737`*^9, 3.771599863643386*^9}, {
   3.7716000083011036`*^9, 3.7716002776419587`*^9}, {3.7716003646979437`*^9, 
   3.771600389290797*^9}, {3.771600431106476*^9, 3.771600440073718*^9}, {
   3.771600472163273*^9, 3.7716004902183743`*^9}, {3.7716005458239126`*^9, 
   3.7716005664315834`*^9}, {3.7716012471915965`*^9, 
   3.7716012776493435`*^9}, {3.771601334567771*^9, 3.771601343834016*^9}, {
   3.771601387349129*^9, 3.7716013923698406`*^9}, {3.7716014434272738`*^9, 
   3.771601449820344*^9}, {3.7716538641336265`*^9, 3.771653894705577*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"79562fd3-fdce-4665-a879-ab6ab5f3b429"],

Cell[CellGroupData[{

Cell[BoxData["CPUScore"], "Input",
 CellChangeTimes->{{3.77160073089458*^9, 3.7716007322050085`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"ca45cf32-9001-4f7c-97be-ecaa2bba070c"],

Cell[BoxData["7345.972839869423`"], "Output",
 CellChangeTimes->{{3.7716007325153484`*^9, 3.7716007445279818`*^9}, 
   3.7716016385036683`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"33b658c9-c09d-42a3-9e88-0b2b6b54e810"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771359337068796*^9, 
  3.771359340266207*^9}},ExpressionUUID->"9a9a9d3c-6a5a-45a4-91da-\
2b14cc656a8f"],

Cell[BoxData[
 RowBox[{"CPU", ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"CloseKernels", "[", "]"}], ";", 
    RowBox[{"LaunchKernels", "[", "6", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"SetAttributes", "[", 
     RowBox[{"Timer", ",", 
      RowBox[{"{", "HoldAll", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Timer", "[", "expr_", "]"}], " ", ":=", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ClearSystemCache", "[", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"AbsoluteTiming", "[", "expr", "]"}]}], ";", "\n", "  ", 
        RowBox[{"Return", "[", 
         RowBox[{"result", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], ";", "\[IndentingNewLine]", "TestSet", ";", 
    "\[IndentingNewLine]", "CPUScore"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.7711977132698865`*^9, 3.7711977216185617`*^9}, {
   3.7711978360285597`*^9, 3.7711978517286015`*^9}, 3.771198763424119*^9, {
   3.771359280930955*^9, 3.771359316255481*^9}, {3.771363991122014*^9, 
   3.7713640223540287`*^9}, 3.771364125865757*^9, {3.771364280912874*^9, 
   3.771364296706525*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"137c0569-cf8e-42eb-b1c8-566f3ec907bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
  "CPU", "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7713640710970225`*^9, 3.771364078696972*^9}, {
  3.7713646106346474`*^9, 
  3.771364612919616*^9}},ExpressionUUID->"f277cb55-7723-4dc5-b1ed-\
7d4be471560e"],

Cell[BoxData["6517.196425636261`"], "Output",
 CellChangeTimes->{3.771364239693561*^9, 3.771364510462779*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"58d1bdf3-153c-4ac6-9807-ea9192a4d0bd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7713640737564106`*^9, 3.771364074642043*^9}, {
  3.771364615764393*^9, 
  3.771364616692462*^9}},ExpressionUUID->"b8577ba7-dd19-4b92-85e6-\
26fff0932410"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"CloseKernels", "[", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"LaunchKernels", "[", "6", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.7711977419611464`*^9, 3.7711977923410997`*^9, {3.771206718015758*^9, 
   3.771206719674358*^9}, {3.771206773747726*^9, 3.7712068327619143`*^9}, {
   3.771207285304338*^9, 3.7712072957982764`*^9}},
 FontSize->8,
 CellLabel->"In[1]:=",ExpressionUUID->"e9aa8e40-0cfd-4c94-9645-c7f5f856ada3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"KernelObject\"\>", "[", 
    RowBox[{"1", ",", "\<\"local\"\>"}], "]"}], ",", 
   RowBox[{"\<\"KernelObject\"\>", "[", 
    RowBox[{"2", ",", "\<\"local\"\>"}], "]"}], ",", 
   RowBox[{"\<\"KernelObject\"\>", "[", 
    RowBox[{"3", ",", "\<\"local\"\>"}], "]"}], ",", 
   RowBox[{"\<\"KernelObject\"\>", "[", 
    RowBox[{"4", ",", "\<\"local\"\>"}], "]"}], ",", 
   RowBox[{"\<\"KernelObject\"\>", "[", 
    RowBox[{"5", ",", "\<\"local\"\>"}], "]"}], ",", 
   RowBox[{"\<\"KernelObject\"\>", "[", 
    RowBox[{"6", ",", "\<\"local\"\>"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7712067777630434`*^9, 3.771206809378445*^9}, 
   3.7712068475603433`*^9, 3.7712072993019075`*^9, 3.7712441088411565`*^9, 
   3.7712453012514915`*^9, 3.7713592687346106`*^9},
 FontSize->8,
 CellLabel->"Out[2]=",ExpressionUUID->"81358967-9bf8-477d-b261-1fff1f086ea1"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"Timer", ",", 
    RowBox[{"{", "HoldAll", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Timer", "[", "expr_", "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Block", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ClearSystemCache", "[", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"AbsoluteTiming", "[", "expr", "]"}]}], ";", "\n", "  ", 
     RowBox[{"Return", "[", 
      RowBox[{"result", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.7711984277028055`*^9, 3.771198439416555*^9}, {
  3.7711985473970327`*^9, 3.771198549066862*^9}, {3.77119857949192*^9, 
  3.771198580077039*^9}, {3.7711988966796923`*^9, 3.7711989236234083`*^9}, {
  3.771199030442132*^9, 3.7711990801001444`*^9}, {3.7711991235009623`*^9, 
  3.771199125401241*^9}, {3.7711992164870443`*^9, 3.7711992185622873`*^9}, {
  3.771199272546788*^9, 3.7711992806609564`*^9}, {3.771199418257414*^9, 
  3.771199450672511*^9}, {3.771199496710451*^9, 3.7711995030735292`*^9}, {
  3.7711997375989947`*^9, 3.771199781272088*^9}, {3.771199830667035*^9, 
  3.7711998345447865`*^9}, {3.7711999239356966`*^9, 3.7711999300370674`*^9}, {
  3.7712000755267363`*^9, 3.771200097128934*^9}, {3.771200157942439*^9, 
  3.771200161085827*^9}, {3.7712002354868555`*^9, 3.771200236789904*^9}, {
  3.771200846571477*^9, 3.771200882279603*^9}},
 FontSize->8,
 CellLabel->"In[5]:=",ExpressionUUID->"d33e8bcd-6332-454b-9cad-d39ce3b377ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPI", "=", 
  RowBox[{"Timer", "[", 
   RowBox[{
    RowBox[{"N", "[", 
     RowBox[{"\[Pi]", ",", "10000000"}], "]"}], ";"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7711978555912466`*^9, 3.771197855703974*^9}, {
  3.7711979227642326`*^9, 3.7711979422874155`*^9}, {3.771198464309681*^9, 
  3.771198465265732*^9}, {3.7711986550751576`*^9, 3.771198656740122*^9}, {
  3.771198862947071*^9, 3.771198875867654*^9}, {3.7711997080628567`*^9, 
  3.771199710161289*^9}, {3.7712074667450075`*^9, 3.7712074781834097`*^9}, {
  3.7712075242182875`*^9, 3.7712075291959777`*^9}},
 FontSize->8,
 CellLabel->"In[60]:=",ExpressionUUID->"7e421172-2c9e-4d6e-871d-f078ec6b79d1"],

Cell[BoxData["4.3212351`"], "Output",
 CellChangeTimes->{
  3.7712007174997225`*^9, 3.771200769764659*^9, {3.7712008964941225`*^9, 
   3.771200906855139*^9}, 3.771202022039445*^9, 3.7712021645158367`*^9, 
   3.771202324072162*^9, 3.7712074934146605`*^9, 3.7713612057891827`*^9},
 FontSize->8,
 CellLabel->"Out[60]=",ExpressionUUID->"8c226d19-56ee-4568-8b60-46746e352730"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771201988604571*^9, 3.771201989170599*^9}, {
  3.7712066040145006`*^9, 3.7712066042129364`*^9}},
 FontSize->8,ExpressionUUID->"0f78b494-7f4b-42e7-aeae-e8c9e2eebe17"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SinglePrimee", "[", "a_", "]"}], ":=", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PrimeQ", "[", "q", "]"}], "==", "True"}], ",", "1", ",", 
       "0"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"q", ",", "0", ",", "a"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712010628536353`*^9, 3.7712010943358603`*^9}, {
  3.771201310705395*^9, 3.771201389103683*^9}, {3.7712016377426796`*^9, 
  3.7712016379686*^9}, {3.7712017536514835`*^9, 3.7712019153472757`*^9}, {
  3.77120689109692*^9, 3.7712069216103244`*^9}},
 FontSize->8,
 CellLabel->"In[62]:=",ExpressionUUID->"94a4315d-0205-4ec2-8d32-5f1f83091796"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ParaPrime", "[", "a_", "]"}], ":=", 
   RowBox[{"ParallelDo", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PrimeQ", "[", "q", "]"}], "==", "True"}], ",", "1", ",", 
       "0"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"q", ",", "0", ",", "a"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771206926179107*^9, 3.7712069438159904`*^9}},
 FontSize->8,
 CellLabel->"In[63]:=",ExpressionUUID->"69575969-fe99-4e8d-8b40-d0e410445e68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SinFindPrime", "=", 
  RowBox[{"Timer", "[", 
   RowBox[{
    RowBox[{"SinglePrimee", "[", 
     RowBox[{"10", "^", "7.5"}], "]"}], ";"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771200551517823*^9, 3.7712005655989065`*^9}, {
  3.771200598043255*^9, 3.7712006509110427`*^9}, {3.7712007515502787`*^9, 
  3.771200782885536*^9}, {3.7712018212541656`*^9, 3.7712018239429407`*^9}, {
  3.771201920346059*^9, 3.7712019309823694`*^9}, {3.771202006992587*^9, 
  3.771202007487732*^9}, {3.7712021633315935`*^9, 3.771202183774933*^9}, {
  3.7712022869470234`*^9, 3.7712022874254*^9}, {3.7712069578723907`*^9, 
  3.771206965582736*^9}, {3.7712077371008415`*^9, 3.7712077377669907`*^9}},
 FontSize->8,
 CellLabel->"In[64]:=",ExpressionUUID->"d9f88141-9b3b-476f-a58c-88919c427a06"],

Cell[BoxData["21.9598833`"], "Output",
 CellChangeTimes->{
  3.77120087328435*^9, {3.7712009069907775`*^9, 3.77120092029133*^9}, {
   3.77120182459109*^9, 3.771201849283613*^9}, {3.77120189170709*^9, 
   3.7712019279190807`*^9}, 3.7712020111781425`*^9, {3.771202167583227*^9, 
   3.771202180082811*^9}, 3.7712022615673847`*^9, 3.771202298679265*^9, {
   3.7712068867684965`*^9, 3.771206905663966*^9}, 3.7712069735455027`*^9, 
   3.771207761664117*^9, 3.7712139941232243`*^9, 3.7713612378693175`*^9},
 FontSize->8,
 CellLabel->"Out[64]=",ExpressionUUID->"fc54522b-1fe8-4e0b-bf8a-80699b15d2c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParaFindPrime", "=", 
  RowBox[{"Timer", "[", 
   RowBox[{
    RowBox[{"ParaPrime", "[", 
     RowBox[{"10", "^", "7.5"}], "]"}], ";"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771206617522396*^9, 3.771206617648009*^9}, {
  3.7712069698642874`*^9, 3.7712070204201307`*^9}, {3.771207074473588*^9, 
  3.7712070955891542`*^9}, {3.7712077038636713`*^9, 3.771207733413684*^9}},
 FontSize->8,
 CellLabel->"In[65]:=",ExpressionUUID->"f3b8aefa-c6e6-4537-a545-8b1af82d8022"],

Cell[BoxData["3.8464479`"], "Output",
 CellChangeTimes->{{3.771207016536481*^9, 3.7712070320390253`*^9}, {
   3.7712070895731735`*^9, 3.771207097911874*^9}, 3.7712073066103644`*^9, {
   3.7712076974468403`*^9, 3.77120772435787*^9}, 3.7712077679981847`*^9, 
   3.771361241799054*^9},
 FontSize->8,
 CellLabel->"Out[65]=",ExpressionUUID->"a766118d-3222-4402-893a-abf02b5c0add"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"what", "'"}], "s", " ", "the", " ", "percentage", " ", "of", " ", 
   "parallel", " ", "function", " ", "in", " ", 
   RowBox[{"Mathhematica", "?"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.771242277763281*^9, 3.7712423367106495`*^9}},
 FontSize->8,ExpressionUUID->"d1d040fb-2670-43a5-9199-02f3d9e81600"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7712424589378667`*^9, 3.7712424626619005`*^9}},
 FontSize->8,ExpressionUUID->"7461f0eb-56c2-40bc-b715-f676404a9070"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newtonIteration", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"z", ",", "_Complex"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "_Integer"}], "}"}]}], "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"zn", "=", "z"}], "}"}], ",", 
       RowBox[{
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"zn", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", "zn"}], "+", 
              RowBox[{"1", "/", 
               RowBox[{"zn", "^", "2"}]}]}], ")"}], "/", "3"}]}], ",", 
          RowBox[{"{", "n", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Re", "[", "zn", "]"}], ">", "0"}], ",", "1", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Im", "[", "zn", "]"}], ">", "0"}], ",", "2", ",", "3"}],
            "]"}]}], "]"}]}]}], "]"}], ",", 
     RowBox[{"RuntimeAttributes", "\[Rule]", 
      RowBox[{"{", "Listable", "}"}]}], ",", 
     RowBox[{"Parallelization", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77124246714984*^9, 3.7712424808232756`*^9}, {
  3.77124255218445*^9, 3.771242562549798*^9}},
 FontSize->8,
 CellLabel->"In[66]:=",ExpressionUUID->"e1e4e4b8-87b4-4cb1-9f61-f72cdad71c8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompileTIme", "=", 
  RowBox[{"Timer", "[", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"newtonIteration", "[", 
       RowBox[{
        RowBox[{"x", "+", 
         RowBox[{"I", "*", "y"}]}], ",", "25"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", 
        RowBox[{"-", "5"}], ",", "5", ",", 
        RowBox[{"2.", "/", "199"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "5"}], ",", "5", ",", 
        RowBox[{"2.", "/", "199"}]}], "}"}]}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712425008417797`*^9, 3.7712425085670867`*^9}, {
  3.7712429418812475`*^9, 3.7712429474972854`*^9}},
 FontSize->8,
 CellLabel->"In[67]:=",ExpressionUUID->"cb6f16db-3e14-402d-af87-4e668c1aab43"],

Cell[BoxData["4.9003171`"], "Output",
 CellChangeTimes->{3.771242513863921*^9, 3.7712425597831297`*^9, 
  3.7712429538622074`*^9, 3.771361246909003*^9},
 FontSize->8,
 CellLabel->"Out[67]=",ExpressionUUID->"6d979ade-8e29-44bb-b4d7-081abd6463f6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771242932491354*^9, 3.7712429336422777`*^9}},
 FontSize->8,ExpressionUUID->"a31cb171-3e42-4284-ae22-7cf709619531"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EigenTimePara", "=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "m"}], "}"}], ",", 
    RowBox[{"Timer", "[", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
      RowBox[{"a", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1500", ",", "1500"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"b", "=", 
       RowBox[{"DiagonalMatrix", "[", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "1500", "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"m", "=", 
       RowBox[{"a", ".", "b", ".", 
        RowBox[{"Inverse", "[", "a", "]"}]}]}], ";", 
      RowBox[{"ParallelDo", "[", 
       RowBox[{
        RowBox[{"Eigenvalues", "[", "m", "]"}], ",", 
        RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712429695722313`*^9, 3.771242984703759*^9}, {
  3.771243015063614*^9, 3.7712430361511574`*^9}, {3.771243082908124*^9, 
  3.7712430937501574`*^9}, {3.771243349224023*^9, 3.7712433788567433`*^9}, {
  3.7712442564703803`*^9, 3.7712442699533515`*^9}, {3.7712444934656286`*^9, 
  3.771244499956271*^9}, {3.771244540928706*^9, 3.771244549748122*^9}, {
  3.7712454006815977`*^9, 3.7712454015761857`*^9}, {3.7712458521018567`*^9, 
  3.7712458529605875`*^9}},
 FontSize->8,
 CellLabel->"In[68]:=",ExpressionUUID->"ca3bd94d-48f8-4941-be5d-c29fb3005693"],

Cell[BoxData["7.5519685`"], "Output",
 CellChangeTimes->{{3.7712429804371424`*^9, 3.7712430300544596`*^9}, {
   3.771243102604452*^9, 3.7712431187193604`*^9}, {3.771243359004862*^9, 
   3.771243383691821*^9}, {3.7712444881518726`*^9, 3.7712445168820114`*^9}, 
   3.7712445573967237`*^9, 3.771361254577074*^9},
 FontSize->8,
 CellLabel->"Out[68]=",ExpressionUUID->"eabcfc4e-4fd9-468d-b47b-2e989b8aecbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EigenTimeSing", "=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "m"}], "}"}], ",", 
    RowBox[{"Timer", "[", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
      RowBox[{"a", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1500", ",", "1500"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"b", "=", 
       RowBox[{"DiagonalMatrix", "[", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "1500", "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"m", "=", 
       RowBox[{"a", ".", "b", ".", 
        RowBox[{"Inverse", "[", "a", "]"}]}]}], ";", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Eigenvalues", "[", "m", "]"}], ",", 
        RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771243397922775*^9, 3.771243405297019*^9}, {
  3.7712446777827435`*^9, 3.771244687666342*^9}, {3.771245397149025*^9, 
  3.7712453986200905`*^9}},
 FontSize->8,
 CellLabel->"In[69]:=",ExpressionUUID->"261a3c06-ac08-4318-93ef-7b575a418db7"],

Cell[BoxData["9.6201635`"], "Output",
 CellChangeTimes->{3.771243413756398*^9, 3.771244698593094*^9, 
  3.7712458750764217`*^9, 3.7713612643145175`*^9},
 FontSize->8,
 CellLabel->"Out[69]=",ExpressionUUID->"ef4d32b1-daf9-4209-bb17-096fb10ad657"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771243302573732*^9, 3.7712433030644364`*^9}},
 FontSize->8,ExpressionUUID->"b723530e-16aa-4f22-8fa0-3c41048a9ec6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LinearSysSing", "=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m", ",", "v"}], "}"}], ",", 
    RowBox[{"Timer", "[", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
      RowBox[{"m", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5000", ",", "5000"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"v", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "5000", "}"}]}], "]"}]}], ";", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"LinearSolve", "[", 
         RowBox[{"m", ",", "v"}], "]"}], ",", 
        RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712433134596043`*^9, 3.7712433352024612`*^9}, {
  3.7712434336971416`*^9, 3.771243449403076*^9}, {3.7712442127782445`*^9, 
  3.7712442247083144`*^9}, {3.7712453905097785`*^9, 3.7712453929163437`*^9}},
 FontSize->8,
 CellLabel->"In[70]:=",ExpressionUUID->"8753108f-772b-4ece-8c96-16f3286e3dfc"],

Cell[BoxData["7.6399213`"], "Output",
 CellChangeTimes->{{3.771243318120142*^9, 3.771243346803438*^9}, 
   3.771243485335987*^9, 3.7712442382810197`*^9, 3.771245544435198*^9, 
   3.771361272068225*^9},
 FontSize->8,
 CellLabel->"Out[70]=",ExpressionUUID->"83b3a782-30c4-4695-8a85-a18675079e7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LinearSysPara", "=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m", ",", "v"}], "}"}], ",", 
    RowBox[{"Timer", "[", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
      RowBox[{"m", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5000", ",", "5000"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"v", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "5000", "}"}]}], "]"}]}], ";", 
      RowBox[{"ParallelDo", "[", 
       RowBox[{
        RowBox[{"LinearSolve", "[", 
         RowBox[{"m", ",", "v"}], "]"}], ",", 
        RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771243457060658*^9, 3.771243462223791*^9}, {
  3.7712439265269957`*^9, 3.7712439457057357`*^9}, {3.7712440574176693`*^9, 
  3.7712440657713304`*^9}, {3.771244188404396*^9, 3.771244198839491*^9}, {
  3.77124538049758*^9, 3.7712453827525806`*^9}},
 FontSize->8,
 CellLabel->"In[71]:=",ExpressionUUID->"017f3c14-02ea-4234-9648-d4eaa53fdbb9"],

Cell[BoxData["8.7945863`"], "Output",
 CellChangeTimes->{{3.77124418388151*^9, 3.7712442075571785`*^9}, {
   3.7712455558088107`*^9, 3.7712455951805005`*^9}, 3.7713612809557076`*^9},
 FontSize->8,
 CellLabel->"Out[71]=",ExpressionUUID->"d4520128-c8f2-41a9-bf84-52004afd7192"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771243872859509*^9, 3.7712438734299836`*^9}, {
  3.771246439011388*^9, 3.7712464393175945`*^9}},
 FontSize->8,ExpressionUUID->"9b509dd6-6bee-485c-85b1-0d3fc14ce038"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TransposeTime", "=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "m", "}"}], ",", 
    RowBox[{"Timer", "[", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
      RowBox[{"m", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"8000", ",", "8000"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", "m", "]"}], ",", 
        RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771243878738813*^9, 3.7712439081441827`*^9}, {
  3.7712439726566396`*^9, 3.771243979177204*^9}, {3.7712452025912943`*^9, 
  3.771245228715435*^9}, {3.7712453145858088`*^9, 3.7712453635698185`*^9}, {
  3.771245426116563*^9, 3.7712454316847*^9}, {3.7712454955888443`*^9, 
  3.771245515914465*^9}, {3.7712457310521984`*^9, 3.7712457315717745`*^9}},
 FontSize->8,
 CellLabel->"In[72]:=",ExpressionUUID->"2f5eeaa6-0be3-4ee1-b962-f2177c1680a8"],

Cell[BoxData["3.7276801`"], "Output",
 CellChangeTimes->{
  3.771245370301817*^9, {3.771245440987831*^9, 3.771245462161208*^9}, {
   3.7712455046067038`*^9, 3.771245528464905*^9}, 3.771245736174467*^9, 
   3.771361284819586*^9},
 FontSize->8,
 CellLabel->"Out[72]=",ExpressionUUID->"51ffa49f-2602-4d08-a8c2-7a515702e4e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"RandomsortPara", "=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", 
     RowBox[{"Timer", "[", 
      RowBox[{
       RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
       RowBox[{"a", "=", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"10", "^", "10"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", "*", 
            RowBox[{"10", "^", "6"}]}], "}"}]}], "]"}]}], ";", 
       RowBox[{"ParallelDo", "[", 
        RowBox[{
         RowBox[{"Sort", "[", "a", "]"}], ",", 
         RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7712461075030136`*^9, 3.7712461291361647`*^9}, {
  3.7712461612567763`*^9, 3.771246309995389*^9}, {3.7712464353921003`*^9, 
  3.7712464361540275`*^9}},
 FontSize->8,
 CellLabel->"In[73]:=",ExpressionUUID->"4d6ab20e-aa56-4eef-ba08-d27524a702f4"],

Cell[BoxData["1.8216094`"], "Output",
 CellChangeTimes->{
  3.7712461263137107`*^9, {3.7712461693450856`*^9, 3.7712463124339037`*^9}, 
   3.771361286736941*^9},
 FontSize->8,
 CellLabel->"Out[73]=",ExpressionUUID->"7760851a-dce0-45c2-ad88-68846970fb88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomsortSing", "=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", 
    RowBox[{"Timer", "[", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
      RowBox[{"a", "=", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"10", "^", "10"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", "*", 
           RowBox[{"10", "^", "6"}]}], "}"}]}], "]"}]}], ";", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Sort", "[", "a", "]"}], ",", 
        RowBox[{"{", "10", "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771246317380642*^9, 3.7712463292508984`*^9}},
 FontSize->8,
 CellLabel->"In[74]:=",ExpressionUUID->"f3f11280-93a4-4af2-9959-6f13629d64ab"],

Cell[BoxData["4.7378502`"], "Output",
 CellChangeTimes->{3.7712463346186047`*^9, 3.771361291574439*^9},
 FontSize->8,
 CellLabel->"Out[74]=",ExpressionUUID->"c5ad7f36-3c8d-4473-b0f9-f488f4a13bd6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Need", " ", "one", " ", "for", " ", "NDSlove", " ", 
     RowBox[{"(", 
      RowBox[{"or", " ", "find", " ", "root", " ", "if", " ", 
       RowBox[{"doesn", "'"}], "t", " ", "work", " ", "out"}], ")"}]}], ",", 
    " ", 
    RowBox[{"but", " ", "I", " ", 
     RowBox[{"couln", "'"}], "t", " ", "think", " ", "of", " ", "any", " ", 
     "long", " ", "differential", " ", "equation", " ", "that", " ", "takes", 
     " ", "time", " ", "to", " ", "solve"}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Is", " ", "the", " ", "3", "D", " ", "plot", " ", "render", " ", "by", 
    " ", "CPU", " ", "or", " ", 
    RowBox[{"GPU", "?"}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "I", " ", "got", " ", "7", " ", "tests", " ", "for", " ", "GPU", " ", 
     "so", " ", "far"}], ",", " ", 
    RowBox[{
    "just", " ", "meed", " ", "one", " ", "for", " ", "NDSlove", " ", "and", 
     " ", "maybe", " ", "one", " ", "for", " ", "rendering"}], ",", " ", 
    RowBox[{
     RowBox[{"don", "'"}], "t", " ", "need", " ", "too", " ", "many", " ", 
     "tests", " ", "cuz", " ", "the", " ", "result", " ", "is", " ", "kinda", 
     " ", "consistant", " ", "for", " ", "performance"}]}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "want", " ", "to", " ", "do", " ", "a", " ", "loading", " ", "bar", " ", 
    "for", " ", "benchmark"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "I", " ", "am", " ", "not", " ", "showing", " ", "the", " ", "actual", 
     " ", "time", " ", "to", " ", "load", " ", "each", " ", "test"}], ",", 
    " ", "instead", ",", " ", 
    RowBox[{
    "just", " ", "a", " ", "score", " ", "in", " ", "the", " ", "end"}]}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"all", " ", "tests", " ", "should", " ", "be", " ", "around", " ", 
     RowBox[{"3", " ", "~", " ", "10"}], " ", "ish", " ", "second", " ", "on",
      " ", "my", " ", "machine"}], " ", ",", " ", 
    RowBox[{
    "so", " ", "usually", " ", "the", " ", "whole", " ", "test", " ", "run", 
     " ", "for", " ", "CPU", " ", "will", " ", "take", " ", "around", " ", 
     RowBox[{"1", " ", "~", " ", "3"}], " ", "min", " ", "depends", " ", "on",
      " ", "the", " ", "different", " ", "laptop"}], ",", " ", 
    RowBox[{
    "a", " ", "bit", " ", "longer", " ", "than", " ", "the", " ", "current", 
     " ", "benchmark"}], ",", " ", 
    RowBox[{"but", " ", 
     RowBox[{"it", "'"}], "s", " ", "normal", " ", "and", " ", "I", " ", 
     "think", " ", "will", " ", "be", " ", "more", " ", "accurate"}]}], 
   "*)"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7712464452846313`*^9, 3.7712464475874796`*^9}, {
   3.771246908731303*^9, 3.7712469090574903`*^9}, {3.771247539975209*^9, 
   3.7712476007935743`*^9}, {3.771247689024544*^9, 3.7712477792492137`*^9}, {
   3.771247890130183*^9, 3.7712479076991663`*^9}, {3.7712481755040016`*^9, 
   3.771248239077998*^9}, 3.7712483181675024`*^9, {3.7712512291906695`*^9, 
   3.771251323430689*^9}, {3.7712551291623435`*^9, 3.7712551392420416`*^9}},
 FontSize->8,ExpressionUUID->"9f94d0b9-961e-48fc-bde9-84daa2c816d3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771333472988369*^9, 3.771333477288709*^9}},
 FontSize->8,ExpressionUUID->"91a30ca9-df2f-4f87-a6c7-08f1062f8131"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Render3Dtime", "=", 
  RowBox[{
   RowBox[{"RepeatedTiming", "[", 
    RowBox[{
     RowBox[{"SphericalPlot3D", "[", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"5", " ", "\[Phi]"}], "]"}], " ", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"10", " ", "\[Theta]"}], "]"}], "/", "10"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Theta]", ",", "0", ",", 
         RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Phi]", ",", "0", ",", 
         RowBox[{"4", "\[Pi]"}]}], "}"}], ",", 
       RowBox[{"ColorFunction", "\[Rule]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], "[", "#6", 
           "]"}], "&"}], ")"}]}], ",", 
       RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
       RowBox[{"PlotPoints", "\[Rule]", "200"}], ",", 
       RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
       RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ";"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7713300547226243`*^9, 3.771330057705697*^9}, {
  3.771330493493487*^9, 3.7713304955464773`*^9}, {3.7713305404923615`*^9, 
  3.771330543498288*^9}, {3.7713306071634684`*^9, 3.771330642256892*^9}, {
  3.7713332580571637`*^9, 3.7713332594605055`*^9}},
 FontSize->8,
 CellLabel->
  "In[291]:=",ExpressionUUID->"cda47f64-4107-4739-a226-123b4ac7aeb0"],

Cell[BoxData["7.6159330499999997599`3."], "Output",
 CellChangeTimes->{3.771330062998218*^9, 3.771330504694022*^9, 
  3.7713305782599573`*^9, 3.77133067651844*^9, 3.7713333017475944`*^9, 
  3.771336222081915*^9, 3.771361321781475*^9, 3.771625554744998*^9},
 FontSize->8,
 CellLabel->
  "Out[291]=",ExpressionUUID->"c7918d95-98b1-4f7d-8cf9-d178eefbf8e7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7713330726390953`*^9, 3.7713330731580467`*^9}},
 FontSize->8,ExpressionUUID->"4dbb4bac-83a0-483d-a556-2dbfbc072d35"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NSloveTimePara", "=", 
   RowBox[{"RepeatedTiming", "[", 
    RowBox[{"Parallelize", "[", 
     RowBox[{
      RowBox[{"NSolve", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"z", "+", 
            RowBox[{"Sin", "[", 
             RowBox[{"z", "+", 
              RowBox[{"Sin", "[", "z", "]"}]}], "]"}]}], "]"}], "\[Equal]", 
          RowBox[{"Cos", "[", 
           RowBox[{"z", "+", 
            RowBox[{"Cos", "[", 
             RowBox[{"z", "+", 
              RowBox[{"Cos", "[", "z", "]"}]}], "]"}]}], "]"}]}], "&&", 
         RowBox[{
          RowBox[{"-", "2"}], "<", 
          RowBox[{"Re", "[", "z", "]"}], "<", "2"}], "&&", 
         RowBox[{
          RowBox[{"-", "2"}], "<", 
          RowBox[{"Im", "[", "z", "]"}], "<", "2"}]}], ",", "z"}], "]"}], 
      ";"}], "]"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771330819519067*^9, 3.771330819966518*^9}, {
   3.7713324991170907`*^9, 3.7713325765433254`*^9}, 3.7713329832603827`*^9, {
   3.7713330594574795`*^9, 3.7713330660195484`*^9}, {3.7713331707900257`*^9, 
   3.7713332373152037`*^9}, {3.771333335422448*^9, 3.7713333361326075`*^9}},
 FontSize->8,
 CellLabel->"In[76]:=",ExpressionUUID->"4239a815-2ea5-4624-bb91-729878635a99"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.5464874999999995708`3.", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.7713331795071034`*^9, 3.7713331883002243`*^9}, 
   3.7713332312717805`*^9, 3.771333268637245*^9, 3.7713333605684724`*^9, 
   3.771361344851016*^9},
 FontSize->8,
 CellLabel->"Out[76]=",ExpressionUUID->"ed1480cf-7fef-440b-a277-f084272ffa47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NSloveTimeSingle", "=", 
   RowBox[{"RepeatedTiming", "[", 
    RowBox[{
     RowBox[{"NSolve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"z", "+", 
           RowBox[{"Sin", "[", 
            RowBox[{"z", "+", 
             RowBox[{"Sin", "[", "z", "]"}]}], "]"}]}], "]"}], "\[Equal]", 
         RowBox[{"Cos", "[", 
          RowBox[{"z", "+", 
           RowBox[{"Cos", "[", 
            RowBox[{"z", "+", 
             RowBox[{"Cos", "[", "z", "]"}]}], "]"}]}], "]"}]}], "&&", 
        RowBox[{
         RowBox[{"-", "2"}], "<", 
         RowBox[{"Re", "[", "z", "]"}], "<", "2"}], "&&", 
        RowBox[{
         RowBox[{"-", "2"}], "<", 
         RowBox[{"Im", "[", "z", "]"}], "<", "2"}]}], ",", "z"}], "]"}], 
     ";"}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7713332962834187`*^9, 3.771333306200106*^9}, {
  3.771333339623887*^9, 3.7713333445896997`*^9}},
 FontSize->8,
 CellLabel->"In[77]:=",ExpressionUUID->"9a26762f-c0fd-407e-80c3-1001396b97d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.6087196499999993904`2.", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.771333328490992*^9, 3.7713333857068806`*^9, 
  3.7713613677977805`*^9},
 FontSize->8,
 CellLabel->"Out[77]=",ExpressionUUID->"b5d5b29b-f9cb-4cb5-a498-c1e2054ba829"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RAMMMMMMAMMAMMMAMAMM", "Section",
 CellChangeTimes->{{3.7712484941736703`*^9, 
  3.771248496466539*^9}},ExpressionUUID->"9ef919cc-f6e7-43a8-8ef4-\
621fbf8afc3c"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"RAMSpeedTest", "[", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\n", 
       RowBox[{"AA", ",", "A", ",", "B", ",", "CC", ",", 
        RowBox[{"AASize", "=", 
         RowBox[{"{", 
          RowBox[{"2000", ",", "2000"}], "}"}]}], ",", 
        RowBox[{"ASize", "=", 
         RowBox[{"{", 
          RowBox[{"5000", ",", "5000"}], "}"}]}], ",", "\n", 
        RowBox[{"BSize", "=", 
         RowBox[{"{", 
          RowBox[{"10000", ",", "10000"}], "}"}]}], ",", 
        RowBox[{"CCSize", "=", 
         RowBox[{"{", 
          RowBox[{"15000", ",", "15000"}], "}"}]}], ",", "Speed", ",", "Time",
         ",", "Score"}], "\n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Speed", "=", 
        RowBox[{"UnitConvert", "[", 
         RowBox[{
          RowBox[{"Quantity", "[", "\n", 
           RowBox[{
            RowBox[{"D", "[", 
             RowBox[{
              RowBox[{"Fit", "[", 
               RowBox[{
                RowBox[{"{", "\n", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"RepeatedTiming", "[", 
                    RowBox[{"AA", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0.", ",", "AASize"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"ByteCount", "[", "AA", "]"}]}], "}"}], ",", "\n", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"RepeatedTiming", "[", 
                    RowBox[{"A", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0.", ",", "ASize"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"ByteCount", "[", "A", "]"}]}], "}"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"RepeatedTiming", "[", 
                    RowBox[{"B", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0.", ",", "BSize"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"ByteCount", "[", "B", "]"}]}], "}"}], ",", "\n", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"RepeatedTiming", "[", 
                    RowBox[{"CC", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0.", ",", "CCSize"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"ByteCount", "[", "CC", "]"}]}], "}"}]}], "}"}], 
                ",", "\n", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "x"}], "}"}], ",", "x"}], "]"}], ",", 
              "x"}], "]"}], ",", "\n", 
            RowBox[{"\"\<Bytes\>\"", "/", "\"\<Seconds\>\""}]}], "]"}], ",", 
          RowBox[{"\"\<Megabytes\>\"", "/", "\"\<Seconds\>\""}]}], "]"}]}], 
       ";", "\n", "\n", 
       RowBox[{"ClearAll", "[", 
        RowBox[{"A", ",", "B", ",", "CC", ",", "AA"}], "]"}], ";", "\n", 
       RowBox[{"Score", "=", 
        RowBox[{
         RowBox[{"QuantityMagnitude", "[", "Speed", "]"}], "/", "10"}]}], ";",
        "\n", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<RAMSpeed\>\"", " ", "\[Rule]", " ", "Speed"}], ",", 
         RowBox[{"\"\<RAMScore\>\"", " ", "\[Rule]", " ", "Score"}]}], 
        "|>"}]}]}], "\n", "]"}]}], "\n", "\n", "\n", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Code",
 CellChangeTimes->{{3.77125373781721*^9, 3.771253740124097*^9}, {
   3.7712542012218065`*^9, 3.771254202031665*^9}, {3.7712542880545654`*^9, 
   3.771254293174895*^9}, {3.771254851994501*^9, 3.7712548696534953`*^9}, {
   3.7712551957674456`*^9, 3.7712551967239504`*^9}, {3.771255825933258*^9, 
   3.7712559035975084`*^9}, {3.771256067822742*^9, 3.771256088913224*^9}, {
   3.771256303670225*^9, 3.7712563248696733`*^9}, {3.7712566272916822`*^9, 
   3.77125662807362*^9}, {3.7712571439992313`*^9, 3.7712571499383497`*^9}, {
   3.7712571828244677`*^9, 3.771257200625807*^9}, {3.771257323448366*^9, 
   3.7712573369183455`*^9}, {3.77125746008881*^9, 3.7712574959559546`*^9}, {
   3.7712575681149716`*^9, 3.7712575873604717`*^9}, {3.771257626192629*^9, 
   3.771257757657079*^9}, {3.771257788650199*^9, 3.7712577903057733`*^9}, {
   3.7712578597305684`*^9, 3.771257870069947*^9}, {3.771257954259787*^9, 
   3.7712579556351085`*^9}, {3.7712580806129646`*^9, 3.771258092403375*^9}, {
   3.771258179776035*^9, 3.7712581900385923`*^9}, {3.7712582646660285`*^9, 
   3.7712582697035575`*^9}, {3.771258307870495*^9, 3.7712583194794526`*^9}, {
   3.771258577871147*^9, 3.7712586186111927`*^9}, {3.7712586563871746`*^9, 
   3.771258692834711*^9}, {3.771258760420008*^9, 3.7712588392624826`*^9}, {
   3.7712589455721617`*^9, 3.7712589526841435`*^9}, {3.771258995699139*^9, 
   3.771259011521806*^9}, {3.771365778772275*^9, 3.771365782483284*^9}, {
   3.7713658271675043`*^9, 3.7713658274427795`*^9}, 3.7715226735506372`*^9, {
   3.771522751667634*^9, 3.7715227685892363`*^9}, {3.7715228860094037`*^9, 
   3.771522986016039*^9}, {3.771523104134197*^9, 3.7715231520476155`*^9}, {
   3.771523460034404*^9, 3.771523499385623*^9}, {3.7715235472986665`*^9, 
   3.771523561622467*^9}, {3.7715236139064617`*^9, 3.7715236719083166`*^9}, {
   3.7715237567652884`*^9, 3.7715237571861258`*^9}, {3.7715245053178425`*^9, 
   3.77152450744719*^9}, {3.7715326032206373`*^9, 3.7715326302601757`*^9}, {
   3.7715328589042397`*^9, 3.771532859089325*^9}, {3.77158712998731*^9, 
   3.7715871824676476`*^9}, {3.7715873447847986`*^9, 3.771587371897787*^9}, {
   3.7715874286847515`*^9, 3.7715876363027954`*^9}, {3.771587682468423*^9, 
   3.7715877082646723`*^9}, {3.7715877397254725`*^9, 
   3.7715877550718584`*^9}, {3.7715877910386295`*^9, 
   3.7715877947368784`*^9}, {3.7715878286539145`*^9, 
   3.7715878522282066`*^9}, {3.7715878860713253`*^9, 3.771588057026449*^9}, {
   3.7715881118943214`*^9, 3.771588119672677*^9}, {3.771588154597685*^9, 
   3.771588211125137*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"1667192e-3d4d-4c99-ba11-4d250411154c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RAMSpeedTest", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7712578758444777`*^9, 3.7712578766961994`*^9}, {
  3.7715326331718807`*^9, 3.7715326372365866`*^9}, {3.7715880740375185`*^9, 
  3.7715880741506977`*^9}, {3.7715882243818116`*^9, 3.7715882252208138`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3355d387-8590-4078-a90e-eb80bff72619"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"RAMSpeed\"\>", "\[Rule]", 
    TemplateBox[{
     "2444.3204497243354011046`1.522878745280337",
      RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
        "\"s\""}],"megabytes per second",FractionBox[
      "\"Megabytes\"", "\"Seconds\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"RAMScore\"\>", "\[Rule]", 
    "244.4320449724335401105`1.522878745280337"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7715882076273327`*^9, 3.771588238323281*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"5121271d-08b1-4a98-af52-f315388e0511"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"RAMMuch", "[", "]"}], ":=", "\n", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Weight", "=", "350"}], ",", "HowMuch", ",", "Score"}], "}"}],
       ",", "\n", 
      RowBox[{
       RowBox[{"Score", "=", 
        RowBox[{"Weight", "*", 
         RowBox[{"Sqrt", "[", "\n", 
          RowBox[{"QuantityMagnitude", "[", 
           RowBox[{"HowMuch", "=", 
            RowBox[{"SystemInformation", "[", 
             RowBox[{"\"\<Machine\>\"", ",", "\"\<PhysicalTotal\>\""}], 
             "]"}]}], "]"}], "]"}]}]}], "\n", ";", "\n", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<RAMScore\>\"", " ", "\[Rule]", " ", "Score"}], ",", 
         RowBox[{"\"\<RAMTotal\>\"", " ", "\[Rule]", " ", "HowMuch"}]}], 
        "|>"}]}]}], "\n", "]"}]}], "\n"}]}]], "Code",
 CellChangeTimes->{{3.7713652233264174`*^9, 3.771365229251895*^9}, {
  3.7713653304574165`*^9, 3.7713653740477104`*^9}, {3.771365441570592*^9, 
  3.7713654572133384`*^9}, {3.771365489686804*^9, 3.7713655567014685`*^9}, {
  3.7713659058822765`*^9, 3.7713659065733905`*^9}, {3.7715882859576807`*^9, 
  3.771588473696578*^9}, {3.7715885318051085`*^9, 3.7715885717661486`*^9}, {
  3.7715888975335093`*^9, 3.771588898307474*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"eaa385e2-81ff-4dd5-acc0-baf9b02d17f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RAMMuch", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7715884843580103`*^9, 3.771588489283643*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"526a1eeb-ecda-4aee-bb72-8ef9d7b7ac16"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"RAMScore\"\>", "\[Rule]", "1196.2728793548247`"}], ",", 
   RowBox[{"\<\"RAMTotal\"\>", "\[Rule]", 
    TemplateBox[{"15.900764465332031`","\"GiB\"","gibibytes","\"Gibibytes\""},
     "Quantity"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7715884862605524`*^9, 3.7715884897401094`*^9}, 
   3.7715885761654205`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"03315269-733c-4d5a-8159-7d95385a4e47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771365449033298*^9, 3.77136545049835*^9}, {
  3.7713659140101633`*^9, 
  3.7713659187069597`*^9}},ExpressionUUID->"b8bf7eb0-d712-4152-af2d-\
0f7056b77435"],

Cell[BoxData["1196.2728793548247`"], "Output",
 CellChangeTimes->{
  3.771365451055826*^9, 3.7713654945029078`*^9, {3.7713655306034703`*^9, 
   3.771365544034628*^9}, 3.7713655998367414`*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"aee6c4b8-7e1f-42cc-a977-6fbc78754088"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RAMMuch", "[", "]"}], "[", "\"\<RAMScore\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771588802896488*^9, 3.7715888336579685`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"80b52537-a087-44fc-ac02-a8421a2e2f03"],

Cell[BoxData["1196.2728793548247`"], "Output",
 CellChangeTimes->{
  3.771588705577976*^9, {3.7715888037160387`*^9, 3.7715888339599333`*^9}},
 CellLabel->"Out[33]=",ExpressionUUID->"4f8601be-d517-46ea-9dbf-3fb0f6416896"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"RAMScore", ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"RAMMuch", "[", "]"}], "[", "\"\<RAMScore\>\"", "]"}], "+", 
    RowBox[{
     RowBox[{"RAMSpeedTest", "[", "]"}], "[", "\"\<RAMScore\>\"", "]"}]}], 
   ")"}]}]], "Code",
 CellChangeTimes->{{3.7713659224183908`*^9, 3.7713659344487305`*^9}, {
  3.7715326509219475`*^9, 3.7715326517101784`*^9}, {3.771588607926902*^9, 
  3.7715886123420744`*^9}, {3.771588670499161*^9, 3.771588682191597*^9}, {
  3.7715888389353175`*^9, 3.7715888417171435`*^9}, {3.77160174956881*^9, 
  3.7716017877731204`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7c7c7763-0333-4d8e-b93e-f8bdad7f450d"],

Cell[CellGroupData[{

Cell[BoxData["RAMScore"], "Input",
 CellChangeTimes->{{3.7713659379090786`*^9, 3.771365939656515*^9}, {
  3.77158869236398*^9, 3.7715886977338276`*^9}, {3.7715888797209263`*^9, 
  3.7715888798763213`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"354ab39e-719d-4423-bec7-d924b24c8d60"],

Cell[BoxData["1604.9055806312783`"], "Output",
 CellChangeTimes->{
  3.7713659689866343`*^9, 3.771523817786791*^9, 3.7715886944871893`*^9, {
   3.7715888721157*^9, 3.771588894044516*^9}, 3.7715889337003946`*^9, 
   3.7716017300152473`*^9, 3.7716018077114964`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ec350d09-c2d6-47da-a493-47f3140f5621"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DiskKKKKKKKKKKKK", "Section",
 CellChangeTimes->{{3.7713307667377048`*^9, 
  3.771330771219041*^9}},ExpressionUUID->"c1357445-cd9a-405e-8a5c-\
774c47abae36"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "DiskSpeed", "]"}]], "Input",
 CellChangeTimes->{{3.7715354814206405`*^9, 3.771535489727255*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"fe4d75d4-aba4-4a2f-9ca5-5e0938374092"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiskSpeed", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t", 
     RowBox[{
      RowBox[{"strLength", " ", "=", " ", "500000000"}], ",", " ", "str", ",",
       " ", "testfile", ",", "\n", "\t", "diskwritetime", ",", " ", 
      "diskreadtime", ",", " ", "diskwritespeed", ",", "\n", "\t", 
      "diskreadspeed"}], "\n", "\t", "}"}], "\n", "\t", ",", "\n", "\t", 
    RowBox[{
     RowBox[{"str", " ", "=", " ", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"\"\<0\>\"", ",", " ", "strLength"}], "]"}], "]"}]}], ";", 
     "\n", "\t", 
     RowBox[{"testfile", " ", "=", " ", 
      RowBox[{"CreateFile", "[", "]"}]}], ";", "\[IndentingNewLine]", "\t", 
     RowBox[{"diskwritetime", " ", "=", " ", 
      RowBox[{"First", "@", 
       RowBox[{"AbsoluteTiming", "[", 
        RowBox[{"WriteString", "[", 
         RowBox[{"testfile", ",", " ", "str"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"diskreadtime", " ", "=", " ", 
      RowBox[{"First", "@", 
       RowBox[{"RepeatedTiming", "[", 
        RowBox[{"ReadString", "[", "testfile", "]"}], "]"}]}]}], ";", "\n", 
     "\t", "\[IndentingNewLine]", "\t", 
     RowBox[{"diskwritespeed", " ", "=", " ", 
      RowBox[{"UnitConvert", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"Quantity", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ByteCount", "[", "str", "]"}], "/", "diskwritetime"}], 
          ",", " ", 
          RowBox[{"\"\<Bytes\>\"", "/", "\"\<Seconds\>\""}]}], "]"}], ",", 
        "\n", "\t\t", 
        RowBox[{"\"\<Megabytes\>\"", "/", "\"\<Seconds\>\""}]}], "\n", "\t\t",
        "]"}]}], ";", "\[IndentingNewLine]", "\t", 
     RowBox[{"diskreadspeed", " ", "=", " ", 
      RowBox[{"UnitConvert", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"Quantity", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ByteCount", "[", "str", "]"}], "/", "diskreadtime"}], ",",
           " ", 
          RowBox[{"\"\<Bytes\>\"", "/", "\"\<Seconds\>\""}]}], "]"}], ",", 
        "\n", "\t\t", 
        RowBox[{"\"\<Megabytes\>\"", "/", "\"\<Seconds\>\""}]}], "\n", "\t\t",
        "]"}]}], ";", "\n", "\t", "\n", "\t", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{
       "\"\<ApparentDiskWriteSpeed\>\"", " ", "\[Rule]", " ", 
        "diskwritespeed"}], ",", " ", 
       RowBox[{
       "\"\<ApparentDiskReadSpeed\>\"", " ", "\[Rule]", " ", 
        "diskreadspeed"}]}], "|>"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.771520884725567*^9, 3.771520897588166*^9}, {
   3.771520957193472*^9, 3.7715209935501738`*^9}, {3.7715210476954775`*^9, 
   3.7715210508866243`*^9}, 3.7715210939892583`*^9, {3.771521147228217*^9, 
   3.771521166025493*^9}, {3.771521602689768*^9, 3.7715216170249763`*^9}, {
   3.771521679080124*^9, 3.771521857636972*^9}, {3.7715219706208763`*^9, 
   3.7715219825292625`*^9}, {3.771522020647048*^9, 3.7715220276153765`*^9}, {
   3.771522154406186*^9, 3.771522155550967*^9}, {3.7715331011508484`*^9, 
   3.7715331045325427`*^9}, {3.771533257654792*^9, 3.771533279734975*^9}, {
   3.771533345189026*^9, 3.771533348741542*^9}, 3.7715337591575975`*^9, {
   3.771533808357297*^9, 3.7715338094941907`*^9}, {3.771533858047742*^9, 
   3.7715338585703707`*^9}, {3.7715344838030677`*^9, 3.771534483969622*^9}, {
   3.7715350137456098`*^9, 3.7715350745174065`*^9}, {3.7715351229115143`*^9, 
   3.771535403382204*^9}, {3.7715354381940007`*^9, 3.771535451904419*^9}, {
   3.771535493183484*^9, 3.7715355696963997`*^9}, 3.7715356137543883`*^9, {
   3.77153569819687*^9, 3.771535723294583*^9}, {3.771536069307393*^9, 
   3.771536072807189*^9}, {3.7715968517592773`*^9, 3.771596854276428*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f9dd8be5-20e8-4049-aa44-102fed6bd4ee"],

Cell[BoxData[
 RowBox[{"DiskScore", ":=", 
  RowBox[{"QuantityMagnitude", "[", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"DiskSpeed", "[", "]"}], "[", "\"\<ApparentDiskWriteSpeed\>\"", 
      "]"}], "+", 
     RowBox[{
      RowBox[{"DiskSpeed", "[", "]"}], "[", "\"\<ApparentDiskReadSpeed\>\"", 
      "]"}]}], ")"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.7715967285065727`*^9, 3.771596735497557*^9}, {
  3.771596919715973*^9, 3.7715969600684834`*^9}, {3.771597017928198*^9, 
  3.7715970188959804`*^9}, {3.7715970526897793`*^9, 3.771597078149787*^9}, {
  3.7715972051832395`*^9, 3.7715972081054516`*^9}, {3.771601928851089*^9, 
  3.7716019376341963`*^9}, {3.7716020027081146`*^9, 3.7716020028343215`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"7febdc9d-3f78-49ee-8b8e-a2b5d65e1c1d"],

Cell[CellGroupData[{

Cell[BoxData["DiskScore"], "Input",
 CellChangeTimes->{{3.7715969680694065`*^9, 3.7715969703662305`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"14669c4d-fcdf-430b-a28e-5db1580c086f"],

Cell[BoxData["620.2877307611818`"], "Output",
 CellChangeTimes->{3.7715969989320145`*^9, 3.7715970488739896`*^9, 
  3.771597170853259*^9, 3.7716018870561724`*^9, 3.7716019967586*^9, 
  3.7716020612354784`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"ac9aa1ba-54e6-4176-aff5-b63e23f7a669"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"res", "=", 
  RowBox[{"DiskSpeed", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.7715219563272247`*^9, 3.7715219613830442`*^9}, {
   3.7715355860691767`*^9, 3.771535587618633*^9}, 3.771535737006812*^9},
 CellLabel->"In[48]:=",ExpressionUUID->"1a6be728-9199-4ed2-9dc2-4d32d857c219"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"ApparentDiskWriteSpeed\"\>", "\[Rule]", 
    TemplateBox[{
     "30.862057443329387`",
      RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
        "\"s\""}],"megabytes per second",FractionBox[
      "\"Megabytes\"", "\"Seconds\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"ApparentDiskReadSpeed\"\>", "\[Rule]", 
    TemplateBox[{
     "561.0986354588139616503`3.",
      RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
        "\"s\""}],"megabytes per second",FractionBox[
      "\"Megabytes\"", "\"Seconds\""]},
     "Quantity"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.771535738738768*^9, 3.77153617667649*^9, 
  3.771596790664296*^9, 3.771596860778393*^9, 3.7715968939681535`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"4d3e9179-20c0-4db2-81ad-32139f46f842"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Merge", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<WriteSpeed\>\"", "\[Rule]", 
        TemplateBox[{
         "32.31107349700604`",
          RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
             "\"s\""}],"megabytes per second",FractionBox[
          "\"Megabytes\"", "\"Seconds\""]},
         "Quantity"]}], ",", 
       RowBox[{"\"\<ReadSpeed\>\"", "\[Rule]", 
        TemplateBox[{
         "595.6337810552985352309`3.",
          RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
             "\"s\""}],"megabytes per second",FractionBox[
          "\"Megabytes\"", "\"Seconds\""]},
         "Quantity"]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"<|", 
      RowBox[{"\"\<RamWriteSpeed\>\"", "\[Rule]", " ", "\[Ellipsis]"}], 
      "|>"}]}], "}"}], ",", " ", "First"}], "]"}]], "Input",
 CellChangeTimes->{{3.771536095739642*^9, 3.7715361321515446`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"7425e56c-7e8e-4d46-b0a6-3b32e11012d7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"WriteSpeed\"\>", "\[Rule]", 
    TemplateBox[{
     "32.31107349700604`",
      RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
        "\"s\""}],"megabytes per second",FractionBox[
      "\"Megabytes\"", "\"Seconds\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"ReadSpeed\"\>", "\[Rule]", 
    TemplateBox[{
     "595.6337810552985352309`3.",
      RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
        "\"s\""}],"megabytes per second",FractionBox[
      "\"Megabytes\"", "\"Seconds\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"RamWriteSpeed\"\>", "\[Rule]", "\[Ellipsis]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.771536108973216*^9, 3.7715361333823853`*^9}},
 CellLabel->
  "Out[108]=",ExpressionUUID->"ae2f772a-9479-4c96-b351-1405a124b8cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"res", "[", "\"\<ReadSpeed\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771535780543849*^9, 3.7715358164000797`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"24402e25-15a6-4841-9795-64172438893d"],

Cell[BoxData[
 TemplateBox[{
  "595.6337810552985352309`3.",
   RowBox[{"\"MB\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     "\"s\""}],"megabytes per second",FractionBox[
   "\"Megabytes\"", "\"Seconds\""]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.771535818125517*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"e0f8b19b-05c5-4da1-b38b-9e7df510e39d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantityMagnitude", "[", 
  RowBox[{"res", "[", "\"\<WriteSpeed\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715357404352283`*^9, 3.7715357561541743`*^9}, {
  3.7715358275582733`*^9, 3.7715358385501385`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"5fadac5b-5c5e-4f5a-8718-a5312d92df7d"],

Cell[BoxData["32.31107349700604`"], "Output",
 CellChangeTimes->{3.771535756668776*^9, 3.771535840161433*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"727bea0f-d9e3-44b9-ae87-88b101ac9828"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GPUUU~~", "Section",
 CellChangeTimes->{{3.7712537492909737`*^9, 3.7712537595920906`*^9}, {
  3.7712582875508327`*^9, 
  3.7712582888912487`*^9}},ExpressionUUID->"0d9f8463-c263-4e37-be54-\
698f10709f02"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<CUDALink`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CUDAResourcesInstall", "[", 
   RowBox[{"\"\<<path_to_paclet>\>\"", ",", " ", 
    RowBox[{"Update", "->", "True"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"GPUTest", "[", "]"}], ":=", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", "\n", 
     RowBox[{"A", ",", "B", ",", 
      RowBox[{"randomsize", "=", 
       RowBox[{"{", 
        RowBox[{"8000", ",", "8000"}], "}"}]}], ",", "dottime", ",", 
      "transposetime", ",", "foot", ",", "\n", "nettest", ",", "convNet", ",",
       "dottrainingData", ",", "convtrainingData", ",", "dottrained", ",", 
      "\n", "dottraintime", ",", "convtime", ",", "convtrained", ",", 
      "randomobject", ",", "\n", "trainingDataforimage", ",", 
      "classesforimage", ",", "moduleforimage", ",", "\n", "netforimage", ",",
       "timeforimage", ",", "trainedimage"}], "\n", "\n", "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"A", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "50"}], ",", "50"}], "}"}], ",", "randomsize"}], 
       "]"}]}], ";", "\n", 
     RowBox[{"B", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "50"}], ",", "50"}], "}"}], ",", "randomsize"}], 
       "]"}]}], ";", "\n", 
     RowBox[{"dottime", "=", 
      RowBox[{
       RowBox[{"RepeatedTiming", "[", 
        RowBox[{
         RowBox[{"CUDADot", "[", 
          RowBox[{"A", ",", "B"}], "]"}], ";"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
     RowBox[{"foot", "=", 
      TemplateBox[{"\"left forefoot\"",RowBox[{"Entity", "[", 
          
          RowBox[{"\"AnimalAnatomicalStructure\"", ",", 
            "\"LeftForefoot::CanisLupusFamiliaris::4t62p\""}], "]"}],
        "\"Entity[\\\"AnimalAnatomicalStructure\\\", \
\\\"LeftForefoot::CanisLupusFamiliaris::4t62p\\\"]\"",
        "\"animal anatomical structure\""},
       "Entity"]}], ";", "\n", 
     RowBox[{"transposetime", "=", 
      RowBox[{
       RowBox[{"RepeatedTiming", "[", 
        RowBox[{
         RowBox[{"CUDATranspose", "/@", 
          RowBox[{"ColorSeparate", "[", "\n", "\t", 
           RowBox[{"AnatomyPlot3D", "[", 
            RowBox[{"{", "foot", "}"}], "]"}], "]"}]}], ";"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
     RowBox[{"nettest", "=", 
      RowBox[{"NetChain", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"100", ",", 
          RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
          "\n", "\t", "300", ",", 
          RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
          "300", ",", "Ramp", ",", "45", ",", "Ramp", ",", "90"}], "}"}], ",",
         "\n", "\t", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"80", ",", "80"}], "}"}]}]}], "]"}]}], ";", "\n", 
     RowBox[{"convNet", "=", 
      RowBox[{"NetChain", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"ConvolutionLayer", "[", 
           RowBox[{"16", ",", "3"}], "]"}], ",", "\n", "\t", 
          RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
          RowBox[{"ConvolutionLayer", "[", 
           RowBox[{"32", ",", "3"}], "]"}], ",", "\n", "\t", 
          RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
          RowBox[{"ConvolutionLayer", "[", 
           RowBox[{"64", ",", "3"}], "]"}], ",", "\n", "\t", 
          RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
          RowBox[{"ConvolutionLayer", "[", 
           RowBox[{"17", ",", "3"}], "]"}], ",", "\n", "\t", 
          RowBox[{"AggregationLayer", "[", "Max", "]"}]}], "}"}], ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"80", ",", "80"}], "}"}]}]}], "]"}]}], ";", "\n", 
     RowBox[{"dottrainingData", "=", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "->", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"1", ",", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "80", ",", "80"}], "}"}]}], "]"}]}], ",", 
        "\n", "\t", 
        RowBox[{"\"\<Output\>\"", "->", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "20"}], ",", "20"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "90"}], "}"}]}], "]"}]}]}], "|>"}]}], ";", 
     "\n", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dottraintime", ",", "dottrained"}], "}"}], "=", 
      RowBox[{"RepeatedTiming", "@", 
       RowBox[{"NetTrain", "[", 
        RowBox[{"nettest", ",", "dottrainingData", ",", "\n", "\t", 
         RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
         RowBox[{"MaxTrainingRounds", "\[Rule]", "120"}], ",", "\n", "\t", 
         RowBox[{"TrainingProgressReporting", "\[Rule]", "None"}]}], 
        "]"}]}]}], ";", "\n", 
     RowBox[{"convtrainingData", "=", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "->", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"1", ",", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "80", ",", "80"}], "}"}]}], "]"}]}], ",", 
        "\n", "\t", 
        RowBox[{"\"\<Output\>\"", "->", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "20"}], ",", "20"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1000", ",", "17"}], "}"}]}], "]"}]}]}], "|>"}]}], ";", 
     "\n", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"convtime", ",", "convtrained"}], "}"}], "=", 
      RowBox[{"RepeatedTiming", "@", 
       RowBox[{"NetTrain", "[", 
        RowBox[{"convNet", ",", "convtrainingData", ",", "\n", "\t", 
         RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
         RowBox[{"MaxTrainingRounds", "\[Rule]", "120"}], ",", "\n", "\t", 
         RowBox[{"TrainingProgressReporting", "\[Rule]", "None"}]}], 
        "]"}]}]}], ";", "\n", 
     RowBox[{"randomobject", "=", 
      RowBox[{"ResourceObject", "[", "\"\<CIFAR-10\>\"", "]"}]}], ";", "\n", 
     "\t", 
     RowBox[{"trainingDataforimage", "=", 
      RowBox[{"ResourceData", "[", 
       RowBox[{"randomobject", ",", "\"\<TrainingData\>\""}], "]"}]}], ";", 
     "\n", "\t", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"trainingData", ",", "3"}], "]"}], ";", "\t", "\n", "\t", 
     RowBox[{"classesforimage", "=", 
      RowBox[{"Union", "@", 
       RowBox[{"Values", "[", "trainingDataforimage", "]"}]}]}], ";", "\n", 
     "\t", 
     RowBox[{"moduleforimage", "=", 
      RowBox[{"NetChain", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ConvolutionLayer", "[", 
          RowBox[{"20", ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", 
         RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "\n", "\t", 
         RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
         RowBox[{"PoolingLayer", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "3"}], "}"}], ",", 
           RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", "1"}]}], "]"}]}], "}"}], 
       "]"}]}], ";", "\t", "\n", "\t", 
     RowBox[{"netforimage", "=", 
      RowBox[{"NetChain", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"moduleforimage", ",", "moduleforimage", ",", 
          RowBox[{"FlattenLayer", "[", "]"}], ",", "200", ",", "Ramp", ",", 
          "10", ",", "\n", "\t", 
          RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Image\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"32", ",", "32"}], "}"}]}], "}"}], "]"}]}], ",", "\n", 
        "\t", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", 
         RowBox[{"NetDecoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", "classesforimage"}], "}"}], 
          "]"}]}]}], "]"}]}], ";", "\n", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"timeforimage", ",", "trainedimage"}], "}"}], "=", 
      RowBox[{"RepeatedTiming", "@", 
       RowBox[{"NetTrain", "[", 
        RowBox[{"netforimage", ",", "trainingDataforimage", ",", "\n", "\t", 
         RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
         RowBox[{"MaxTrainingRounds", "\[Rule]", "2"}], ",", "\n", "\t", 
         RowBox[{"TrainingProgressReporting", "\[Rule]", "None"}]}], 
        "]"}]}]}], ";", "\t", "\n", "\t", "\n", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<CUDADotTime\>\"", " ", "\[Rule]", " ", "dottime"}], ",", 
       RowBox[{
       "\"\<CUDATransposeTime\>\"", " ", "\[Rule]", " ", "transposetime"}], 
       ",", "\n", 
       RowBox[{"\"\<TrainDotTime\>\"", "\[Rule]", " ", "dottraintime"}], ",", 
       " ", 
       RowBox[{"\"\<TrainConvLayerTime\>\"", "\[Rule]", " ", "convtime"}], 
       ",", "\n", 
       RowBox[{"\"\<TrainImageTime\>\"", "\[Rule]", " ", "timeforimage"}]}], 
      "\n", "|>"}]}]}], "\n", "\n", "]"}]}]}], "Code",
 CellChangeTimes->{{3.7716481076697054`*^9, 3.7716482309409533`*^9}, {
  3.77164826204541*^9, 3.7716486247256517`*^9}, {3.7716487275047393`*^9, 
  3.7716490363909893`*^9}, {3.7716491710897455`*^9, 3.7716491790916715`*^9}, {
  3.7716492774815454`*^9, 3.7716492821417236`*^9}, {3.7716494055546455`*^9, 
  3.771649409564809*^9}, {3.7716495448594913`*^9, 3.7716495743322744`*^9}, {
  3.771651879347664*^9, 3.7716519101536922`*^9}, {3.7716520861112537`*^9, 
  3.7716520970101857`*^9}, {3.7716521546879206`*^9, 3.7716522973920145`*^9}, {
  3.7716523355305915`*^9, 3.7716523356991405`*^9}, {3.771652375966292*^9, 
  3.771652385535579*^9}, {3.7716524618133106`*^9, 3.7716524786613636`*^9}, {
  3.7716526401784334`*^9, 3.7716526462891827`*^9}, {3.771652688150024*^9, 
  3.7716528067152367`*^9}, {3.7716528883897996`*^9, 3.7716529450644646`*^9}, {
  3.771652996170702*^9, 3.7716529967860556`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"998f59dc-5691-4c9c-8471-e6c19577f140"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Score", "[", "t_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "900"}], "*", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"0.02", "*", "t"}], "]"}]}], "+", "900"}]}], ";"}]], "Code",
 CellChangeTimes->{3.7716536442512493`*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"f3f57fe4-c37b-4fa1-a77e-110c58cf2c8a"],

Cell[BoxData[
 RowBox[{"GPUScore", ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"GPUTestResult", "=", 
     RowBox[{"GPUTest", "[", "]"}]}], ";", "\n", 
    RowBox[{
     RowBox[{"Score", "[", 
      RowBox[{"GPUTestResult", "[", "\"\<CUDADotTime\>\"", "]"}], "]"}], "+", 
     "\n", 
     RowBox[{"Score", "[", 
      RowBox[{"GPUTestResult", "[", "\"\<CUDATransposeTime\>\"", "]"}], "]"}],
      "+", "\n", 
     RowBox[{"Score", "[", 
      RowBox[{"GPUTestResult", "[", "\"\<TrainDotTime\>\"", "]"}], "]"}], "+",
      "\n", 
     RowBox[{"Score", "[", 
      RowBox[{"GPUTestResult", "[", "\"\<TrainConvLayerTime\>\"", "]"}], 
      "]"}], "+", "\n", 
     RowBox[{"Score", "[", 
      RowBox[{"GPUTestResult", "[", "\"\<TrainImageTime\>\"", "]"}], 
      "]"}]}]}], "\n", ")"}]}]], "Code",
 CellChangeTimes->{{3.7716490441094875`*^9, 3.7716490478761053`*^9}, {
  3.771653656802018*^9, 3.7716536634911184`*^9}, {3.7716538411448793`*^9, 
  3.7716538431424837`*^9}, {3.7716541432071466`*^9, 3.771654266188291*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"d9c42df7-cd2e-4a75-955a-9ea12a85c3ab"],

Cell[CellGroupData[{

Cell[BoxData["GPUScore"], "Input",
 CellChangeTimes->{{3.7716542717183967`*^9, 3.7716542738256817`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"f9bb36a2-c555-4163-a164-5f41ad08a929"],

Cell[BoxData["3989.828481917906`"], "Output",
 CellChangeTimes->{3.7716543939715033`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"4e6f58e9-37c7-4e51-8053-c9607b9a022f"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.771620259977219*^9, 3.7716202606908464`*^9}, {
  3.7716207350913196`*^9, 
  3.771620735922406*^9}},ExpressionUUID->"b59b21b9-7bf7-4940-8871-\
6d27bad30c3f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7716206320053234`*^9, 
  3.771620633547171*^9}},ExpressionUUID->"272fa20e-8bd2-4ddb-90a9-\
f8ad11728d7c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "50"}], ",", "50"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9000", ",", "9000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"B", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "50"}], ",", "50"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9000", ",", "9000"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.77162026128233*^9, 3.771620294416254*^9}, {
  3.771620418800975*^9, 3.7716204546001005`*^9}, {3.7716205571511893`*^9, 
  3.771620577758486*^9}, {3.771620629895813*^9, 3.7716206768235116`*^9}, {
  3.7716207127975593`*^9, 3.7716207176301136`*^9}, {3.7716207550833426`*^9, 
  3.7716207739042706`*^9}, {3.771620815167431*^9, 3.77162082839332*^9}},
 CellLabel->
  "In[292]:=",ExpressionUUID->"93d08971-1f53-4f67-b7c8-b40cbbc66a31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RepeatedTiming", "[", 
  RowBox[{
   RowBox[{"CUDADot", "[", 
    RowBox[{"A", ",", "B"}], "]"}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.7716202620180473`*^9, 3.77162026229736*^9}, {
  3.7716204791082067`*^9, 3.7716205533588862`*^9}, {3.7716207494537883`*^9, 
  3.7716207818288155`*^9}},
 CellLabel->
  "In[294]:=",ExpressionUUID->"28acafa5-809a-423d-9559-5211d34bac6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8.9053975499999999954`3.", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.771620502581338*^9, 3.7716205705461097`*^9}, 
   3.7716206248400908`*^9, 3.771620662831109*^9, 3.771620701009199*^9, {
   3.7716207469897814`*^9, 3.77162076986474*^9}, 3.771620805247674*^9, 
   3.771620863870157*^9, 3.7716256082974463`*^9},
 CellLabel->
  "Out[294]=",ExpressionUUID->"2b02bff5-12b1-46a4-b4bf-6c6b898ac1a9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771621279339407*^9, 
  3.7716212796333685`*^9}},ExpressionUUID->"71c75be7-ce3f-4c5e-8987-\
7f6f339c6881"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"RepeatedTiming", "[", 
   RowBox[{
    RowBox[{"CUDATranspose", "/@", 
     RowBox[{"ColorSeparate", "[", 
      RowBox[{"AnatomyPlot3D", "[", 
       RowBox[{"{", 
        TemplateBox[{"\"left forefoot\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"AnimalAnatomicalStructure\"", ",", 
              "\"LeftForefoot::CanisLupusFamiliaris::4t62p\""}], "]"}],
          "\"Entity[\\\"AnimalAnatomicalStructure\\\", \
\\\"LeftForefoot::CanisLupusFamiliaris::4t62p\\\"]\"",
          "\"animal anatomical structure\""},
         "Entity"], "}"}], "]"}], "]"}]}], ";"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.7716202625566063`*^9, {3.7716209185523505`*^9, 3.771621008454968*^9}, 
   3.7716210524734325`*^9, {3.77162120677168*^9, 3.771621214069517*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"df834d58-b77f-4ed0-aa0a-a3f877d12f62"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.2029205000000000592`4.", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.771620959754777*^9, 3.7716209832288704`*^9}, {
   3.7716210147674465`*^9, 3.7716210249801707`*^9}, {3.7716210713767643`*^9, 
   3.771621080120401*^9}, 3.7716211379210854`*^9, 3.7716212330371466`*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"85dbf2c1-4874-4d8e-9603-12ddb0ab8d66"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.7716202627201695`*^9},ExpressionUUID->"e214fdd5-f290-42cb-a90b-\
7690367fa973"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771622150437532*^9, 
  3.7716221507426867`*^9}},ExpressionUUID->"68baf39f-ea27-48de-a387-\
7cccdb4dd7f3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Instuff", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", "20000"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Net", "=", 
   RowBox[{"NetInitialize", "[", 
    RowBox[{"LinearLayer", "[", 
     RowBox[{"20000", ",", " ", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "20000"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"Net", "[", 
    RowBox[{"Instuff", ",", " ", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], ";"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7716202628777485`*^9, 3.771620262959529*^9}, {
  3.771622067775093*^9, 3.7716221980570564`*^9}, {3.771622231729476*^9, 
  3.7716222463215427`*^9}, {3.77162230207509*^9, 3.771622316763609*^9}},
 CellLabel->
  "In[184]:=",ExpressionUUID->"a6b48a0a-9b9e-4ac6-a88c-9cc497755e49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.518856`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.771622135744257*^9, 3.7716221783129005`*^9}, 
   3.771622209079234*^9, {3.771622240679243*^9, 3.7716222515121913`*^9}, {
   3.7716222958407164`*^9, 3.77162233012072*^9}},
 CellLabel->
  "Out[186]=",ExpressionUUID->"025a429c-b214-4395-aa72-2e7baec6176e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7716221544620275`*^9, 
  3.7716221548904004`*^9}},ExpressionUUID->"e1c0bab2-803c-4ac4-ba1e-\
82f5502911f4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"ResourceObject", "[", "\"\<CIFAR-10\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"obj", ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"trainingData", ",", "3"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.771622387469636*^9, 3.7716224047040415`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"61339db7-bc82-4eae-b053-32aa01ce96c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJwtlNlT4gt2x28lNUlmpqcmd+nbtvbi0ldtcUcFEZBd9n0HQeCH/EBAdhCQ
fVVBBERQ3Ld2X3uxby/39u3JpOpmuqYzM1VJJZXkIQ/5M2Kq8nBOnXMezsP3
861vg3qSO/5XX3zxhf3vbhtX5cbabKop3t/fLgKzXa8zawGK2aHVaW1w9V/f
Huv/v/5v/unY+o+n1k9nvter9ovK5LMFYDcjDxtRETP2vDJxlNNENPCUETPv
ooYNKKMYEjMQ8k5ayUVd94nmJkiBMZRDCPfI4bOTpNQEPgwgQ5qhkBphF3W4
1FCnuuflivzTpf3zc8/zZe1PB1PvduxXFd2zeUUpyD4saE5L40HdgF3x1KXp
jdjwplGoktIYAGCzk8PzZlJsHBXUorMunh9Exy34jIOSMuOTJpxfAzOJngKC
Vham7jDN/Hzt/fBMd7EouijKzwqjVyX161XjaVFTCjCu1oyzHrxZ2ZwJkbNx
djmnnLbiF5O8zZwk52WEDEiTsD0AYKMges6CS09gyl56zkZIGZAxI8oDDhml
/S8X5NtR7g+74GVZeLbAP84KdhPcJQ9pM8ZbibIv1vRbC3KzqnMuSj/aMwT8
GKsFcXJsfXvjrxaV+SQPFLaOoh+UjMTDALdgxK66aAuG4cRYf3aSEDdhzULI
hwrw45rhrMC9qsheLGv20vzz4tjzZbAa41VCrM2k8BaBXYksp0QfXwfmYpT5
OGMpy/rhe9/xvn2pKF7KC+Y8xN0A6TLGKBiQhYnhrA65YMIlwaHkBNqv7H8W
pB3PCF6v3SojWZyinhc1r6rGWwTbs6JFN3lGhwrIBpb84r2F0Xenlp/fhG8O
zKcbY9UCF1S1M+l3E0nSzhpwVlEsulAJHTxvxZesxHUvKzoO8yt77YL2/Qj3
w6blZnnspqo9yCiuy/r1qHAvLboqKE4zyowe5+C2ryd4B4vS/bJwuyQMOFAu
c1/IAzNpIVplq8cz6PMT9jYtcRclH+BWblUy44+j4qwVZxO0uqU910X9op2S
NQ4uuikBFXI1JJw1E1amWcte6nles5OSHeXVxRjJpe8waZrNYLNK8cRiGtCM
Nkf9sGQQp9d3gcYesaDZARKyAZlV1ldwks+yyo0oP+8kLzhoU4qhaTnsIM6v
eBlZO316DOZT9M+aSFEdbjkmqM7xM1GCx9HNZX1LpX4zae9y+6BqzVM+qzbi
69SrW+m0Wou126huTrsYBuGQmgWZ85ArMc7ejGwzLo5okQ5p39sN28dd54qX
9mZtsuxnVWPcKQ3apSLd7FkOV+Ui9r0pD3wqAjN62sMprNMNZzDu8zi1BrBF
yH9Moz4AtS1c4h3pSK0XJBaSskyIkPWSd2cUB3OqMDB0UgT/dBP9y6vY5/PA
qp9V9LD288qEk+7WEP7r5+yfP8ZGhn6r1bYFMtBYcSCVxWvULbSRr5SSBqcR
5rWgPSbMfJxlVPbSkHdFNEgmIc6n8GE9IqZDb8akBRf9z29m/+2H9KeLwOms
YhbEVnzi46WJrZwmZSf+z+f5f/kpTR362uqBRrIwb6wjncF5HFAz0Lpfkn84
tH08cr7dt2zllBE7y2ekpv2iZ5um2FS/Y7RzSg4NquG3/3936v507T3PK3Mm
7FVOv51Qrc8oT9Z05fTI+2P1zZ424cfN5UkmU2PY213O0bIRwlZedlDSupQD
em7jpKxplP6I2H9PSusAxFDbBHza3m2VQG6DKDqOunXL623wvCT9cce2H+Pf
LOmfVybfPnMfbarjof6NIikbH8xmMAsLmKttxb//FL1ckS8GyBZ5D3mwFg2t
oRO+teg6NeJWDv4xD/9ExoS4Laiwu88igdz6JGenLHnZ/3DsOigoXm6YthKc
05z0MCs6WpavlvgBL3RjjTlhqA1Mdz3bYPzn793/8dZ3WdIZBQgitIaIqMEP
3xfxWlSjHWzaY/ZInZz3ZD7Jr8wr7UCHid8SVg1G1IjqtOCiMGZX9eWmGXs5
+WVp7KIoPaxIylnGSpFZ3WB6/V0by9LdinBvAXeQYckJHU1f30H3PqRi7vMZ
3wKjLXzGYyalRgdA7VZEZVEyH2MDnCd2abdf1ucWdJ/N6/OOIa8KGgLRR/nx
N+uOf34593bf+XIffH+te/9ucmdHYdb3AfL2CeWTpAtN6ruP6a6hIutwsDsC
2l2DugFUN3IZdRTiYwKmwWnDFbNUUNKiY0JDmmGHsDdjJi+5ECs+UsaCP13Q
HWYM77ejx/PgHy9d//1z6Hev3PMJGo/ytVEHiQQHgp5eFbdewfhOSntiUfUV
E7xJACLm1LqtOCM4TKdAJOIOl61XK37KgD0x8PumxpARABlXQ3YD+K0IpeKj
vtsK7s1ORpSI17Pcfz00nmSl5TB1NY3fWWbv7oh3qmMHBf36rGbWy4pZqQ41
AtP9tZDWnkmIZlKM9Aw3FhcTMTUSRruE3D7K7LQrh9JGXNGCPEswr7Lio7Ts
5ZJ9xS+9DcBjP+FFhPyuIH9VGi37iLMOfMSCt0iGjPR+BaFJQqjjoe923f8F
tu0RjwTVg5jSkjgUxucWtCP4FhrqOxaiXoRrCBuxRT/lZlG97Bh5Ma99lTNe
ZQwv8rrDtGh5ClMwdc1r2xyMeh25VY1t1eLbjNRuE60LILdKcQ8B7qO++i/l
6AGzkkxld2YXRtNRptNO5XG6pbRupwgxLYOZeQ0pO+IgLLzMKN6t6JccxKKD
dLE0frgEJO3DDkGjDn9XCLtL6rhHeHqP0fvAwOoJarFaVj+269tsjCKkNRPb
65JOudXCjkTY0QCJRnygFPepeT1+NdIn6wJp9wNAT1w2cJ0b+/2+ZTvJ2Uxx
TyqaYpwzbUS55dBxUhP8wd901Px64MGX8Ee/xrTeARhtPh2Li21Lh0iJEImJ
aPAAzEpu0usm2k39ElajAxg2iPsdarh7rCes7/droNcp2ccN64uy7nrDuJtX
lCOslQg5MTHokUB94gFSy1c9NXdIzfdwjb9F1/8KXf/LCMi0yYg2oLuQogHs
Xj6qzakl+90kQNkmpzVNa0hKSrtZjXJO4NNBWsQx/H0R+MNJ4Kqs38urdnPy
nTSvOoUNSCHRscGwBKpANZA7H2vx3byOOsKjL8nf3ZtgwIwceCFAz/hwLNh9
bPM3fFSjgtMkYdYDbKiS2G0WYQAJYgJAT2oHwjb0H2/Sf3gRuaoCJwvSk3n+
6TxnI0iblveXnTQXp8kh7rIo0eqRTi6kDl3zm9FhKEgfdMpQhwVVwjIoHKrT
07rVxBaQcQu9GeTjqANNLGQTB9tsVsMdGoRd0vN8XXdRVZ0ty9+sa1+vjF3k
BcezorVpzttVy05cGDNhx1idsEd/q8K0sToe+FWM9aTu89vccRkwiVpGSU0g
u8+voYAsuFWMNwtxHjVlSkNKuYXBAD/o5Ubd3NUkZSlCXI5TThbEpxnu91XF
i8WxnQh/Lcj5p+vUVk7rnyDoWX1JE7vglZ2X3B/OEs+3rBkPmYeqG+m5ZxKj
x6iwvodfjtNRPFgDresb0VB9UDcyIUOYZIicT1pN0HJe/Iwdc5QRrwcJC7b+
RSfmKqfajPLtKsTphituI1eCyo8XmQ/nqU8v5wMGmprV4VAh6PCHZsGweqQH
/ug3/bW/BEhdSlSDFFFrorcHFEOjyIeTzM6chRWdgDulXclJXMVP3YtTZw0d
WSP8xzXzUVbu0MLjPkbEhM+5xFfboUJEvugXEDvqKP2NGlafno80spGUp98w
u2pc4iEDDQLgGlPjuGU3e0Y/nADRThl0OSzyyiE+Qfv0OCxigG9OE/aC+Mus
6E3VsBNnVHOMaIToVQ27pBRWX8PI0680+GZK530ptsOrolqEGJDTaxP156zs
ckAyPY51ygaTBtJGmFNyozdCXK8SFtNj8zbUkgUX0sHsEsizKP39ouxVQb4b
520ESaUZbCSKi4LkrE0eB+k+6aCW8ERL7ojpqQ7JoFU4YOB1Fqa4B2ltzsV2
q4ZSFmbeya1OM6t+3H5MWHSzgxrk/wLDAf8F
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"frog\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJwtlndQ21e2xzPvzWZ3vY5jG/vZKbtJnH27Thw79rMxtrFxBIgqUEO994Yk
EOoCIRAqCIEKQnRQAYEAIapEE70YcAkGjO11iVuSTZwtmckma2dn3y95b+Zz
v3Pu/eOcO9977p37Hl2MYP/HK6+8UvQrQBA0BUgioamQe4EJSlTE44hYzEyR
lMVhSc7R/xNYfPf/x0+xb3Dc4Kg/l3jhrTcPlBbLFVIhn01paHA7m331bb03
dh797fsX3714+d2LF/8A9J8vJ2ZWbt9/+sO//v3dyx9f/Pjy5Y//evb8r8HR
aU9oTKopQ+UhOCwyi0PLgqRDEdmJl864PL3KsqqEcxdOHfsDGQ0zaNVGXWm7
x+/tjcyt3n3y/MWX37588pd/Pvnmh8fPf3j0/Ie17ac3H3zz8OvvH3z13ZOv
v332/Nsv/v799uOvA9FFQ52nOxTu6/Z4m2zVxgo+i8SiIdqDw1XOJiqFWlEs
rbcZO9pbl+aX125sx1Y3J5a2owufjsytD85cG4hdDU+tA/ROrIZi6/2xa+Hp
GwPzN4dWdiLr9yZuPhleuxeaubZwfWvr5vr2+vT6bGwo6O322MutdiqXT6cR
hVy8oVzW3NLgDYS0ZrtEZ5SVVysMNSqTVQmo0a422VUmu6TcLDNalWaH3Fgr
NdZJTW6lpbG4prW81mfz9HeNTt+6vf35g40ndzfvb13duDKNJpPZfC4JD3VV
F3cHW/w9PcWGap6iRGG2mhs81la/zeOvavFWtfgcvm6nv9vZEajt7HJ19lhb
Ow2u1tJql9JglepMhSUVIo1RU+WaWlj46vN7Xz2+/fTe1uO7m8ng5LJStblM
Mhasn1uYsjX7ClXlUr252hus7x12BwddwUF7cMjZO+IKRdwDY81D420jk55I
rG1kqnlwvK5vyNkddnT11wV6rY3tOkdDW0/fg4d3vn5y94sH25/t3PjggyNF
Qpav0TwSqB+ODmlM1bwCZXGV3REI1fiCVk+31Ru0dIRqgkO2nmEnUKI/Ut8f
aR6aaI/OtEenW0YmWkcnveOz/XPLnUNjRnerrcXz6ebGN8/u/fmznc/vbxUI
iI5KVX+H4/rimLenI1+p4YikOofL6gmYW/1V7Z1Vni6LL1gTCNm7w3X9o02D
4y3Dk60jU4A2DUbbRsY7JmaDM0v98yvBiRlLY5vF3TI5u/D86b2vfs4/2ucO
B2qWJzs3ry2aXXZ2QYFQpiyvc5tbvQCWdr/VG3B2h+r7hgAa+ocbB6JAiYZw
xB0a9UamuiZneqbn+2aXgtML3tFxS2NLaVVtR2j0y0d3nj++A+Tv91aEvPql
cd9MLMJVFKXmZBOZrIqGBqvXX+PrtAGn2d3bFB5pGx4DaB0Cko8B+QF/GsNR
ucUmM1m0DpfN21EfGmjoH7TUN8r11ZY679a15S8ebD27txnptk6FnMvjHYGA
LwOJ/K/fHj566nguGUcVcWWGckdnR11PX3N4xDM87h+dDESn/WMzvmiseyKm
MJiOnDzx9od/+P2p46eSLiTlZGVgMMmQnKSMXIpAOhDq3lybuLUy9Whz6tnW
/Oe3r9TVu08mJO7Zt3vfG6/v/23ckY/epxXkNw8MtI1GOyangrGZ3qnpvqmZ
ntmFgeXl+i7fqUtn3jry1qG3Dx1882DcG3FxhwH279n/+q7XXjtxLrGp1XNn
a+bBjdlHWwt312O35iIyufqD+Iu79uzad2DX7rhdH575WFdjdQW6fZGxweXZ
sfWlwblYYGTQOzrQHOpKR0EOvnvg7XfePHjwwMEDcQfi9sfFvR4X95u4uNf2
vv6b371/tNRUd//u1Yd/Wtu5Or25GB2wGDAIAghJPvS7d/Ye3Ldn/2sHDu17
/49HEkFJshKN1qA3WS3VdpvRZJSrVQhMXtzBfYcP73/jjf379v16795f7dnz
6u7dv9i9+9Vdu1799S9/8e5/H+cVGNZGB29tzHy6EtmeHmgj4lGpcDhfkUNk
JsPxSRBkUlrm2aRP0mEIoUxF4eYTGTwqk58DRaek5SSDsz8+lfDRifijH598
79jR9z78iXc/OHrk2InfH/+f4/EXs3EcJksV0ZR9tjJxfXno1nhPIwiETkhN
oYigrCIEX4sqMOAlBrLczFBbGGozRVnGKjGWOJoF2kqqpISp1DMUepKkFC8s
xvJUaK4SDShPieLK0Bw5lqtGC3VUDDucg386MXh/58r9hbHWhFP0j89A2cJc
Kh9CFEHoMgRHjRHpiEVlNIWerjIBiCqcAGK9g6Y0kuQVFFkFpbCMkF+C4hXD
OMUwtjqHWpRNLMzGFVzG5lOTINHzoIcTfXc2lz+b7RnI/qPgzNFcCgNOYcPw
XBhVhGYVYfkKjECG5hdhuFIMR4pmF5GE6kKtFc0pyiBw0CwJii5EUAUwMi+H
yMnAslJQzCw8n8zXIDlK/ulzC6nHH8V6d27MPZz1RwoSBaBjn2TBMjFUOIED
owryGEAJMU0GOGNlKU0MWQVNqicX6piyCrRABWUXEYTFeIEay1eiWYUIEjsb
RwWjyal5RASFg6QKJeePX+V/9Kfprtsbc5tLw2td1UYWIQsCz8Yx4HgWjMxC
0jhIMoulMskcXWpnQFMbUDs7pVVtwnK3xNomc/pVNr/C5pfV+FgaayZRkIFj
pGMJ4DxMci4iKS1HiwTdbCJtXem/fWvxylR4sbbGUySFQZEQHBOBY8CIVCSF
jiRSkhC0NEaxqKQyX10h0VnExcZ8hZ4t13HVepHaINKYqOJiwJksPBdCYkPw
lBwsOQuJB4EzO8o1X65G71wfu3N39c5KJIyGm0+exkByM3FUOIYCIxJhJDKC
SErCcNlmf2x2MTIytDA77XY6B/v6AgF/fUNdrb2muaHeUVsLzcMi8DQYgZ6D
p+XgaBAMGZKV2cPgrjrad9bGdzaWt1cn+vEI4/7D+NTkNBwOjsZBCTg4gYgg
Ui7hhWxbaGLx+kg0urK02OBwBwNdw8ODfr/XWmWx2Wx2lwuJI0JxFNjPQHC0
XCwRlw7yHn5nlcrd2pjZWJxcm404eUzxifi8rNxMFAmCwIFRWAiCCMsjAr1K
kDsUlU2KimpDTV2F2VVqsltqm6pczUab22RvlOsqgW1n4sgQLBmGpkDzKAgY
jpCY7Dx0bEVecn/rys25yMpUhM3jwZEEHENE4SipPDlaKMPyZDiWCM+XcbU2
gb5WbHAV6J0irY2nruRpKjkqE1NewSjS0yVlEBInHUfJJFBzKKw8CgdL5DBQ
zDKssKGyamtl5upceGa0D87kXaDkZ9GlGLqMLNSQ5FqqRs8qqeBoK6jKUhpw
YVWVTFUVQ2Gi/9yo/wcQ02V6hqyUJdfSlaVkVSlVpsbny2E0SQpTyi4tWY5F
VhZDU8MdeBo/LV9HUtWkEwWX80gZGCqEyITRBCi2GMcT4wUigkCO56uw3CIU
U4RmiDFMMZZdiOaK0XwxlluIZYhRwB+SLoSR2GkYJpSjBdFVYqnm6vLMymJ4
YaJHJS0E4xh0dSW71Ior0KHZCihVnEHIB2MFYAwXjGWkYjgpaC4IxQQh6CkI
ejKcDoJRLyMol5E0EJKRimSnonhp+PwcSgFJYmAXu9GcUl1J2cb1udXZgfnx
nkBrNQoHT4Ejc0kc4IEiFujpagtPV8svc3O1Lk6JnamqpsjMWKEOeG3QvBKM
QPuT8rVEsZ5UaKDLKhlqK1Nn4+gcFLkJxpAjKAJ3m3tpYfjKdDg20jk55K+v
NTJZRAgUkpKeBcrIvZwNT4FiMvMouXg2gszNo/LQdAGKLkDShHmMAhSjAAkY
QhPAadxcEisLR0tHE8EINBiGSsvNg6OJer1+fKz3yvzQ4mTf9GhgNto9NeTt
aKrUFLGxiMx0cFLC+TNnz8WfTUg4febs6YSE+PPnAc5eSIy/CDqTmHz6wicA
8UmXT55POH0x8ezlSxdTLmdkpmJQMLGAU2+3Dvf65iZ61+ZHAHPmxoKAjvY2
dbVYagzyfBYmD5p8Lv7DCwknMsBJ4OQkMPiTi5fO5eRmwuAQcFoqFA5FY9Aw
BBycnkIk43AENJVO4vOZJRpJrc3cUlcTDQdj0f6VucjqfPR/Aa+HBcw=
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"automobile\"\>"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy1VmlTk1cUdtov/dif0P6Aju2HdqgzjspUVERFERAQCAgEBEMSooBoLSCF
CiiCIIqgAoJlkz0gi2WR8AaymISQEAJZSMjKln3vSYKZaINTUc8kd+5733uf
85xznnvv+318+pmkr/bs2ZPxDTRn4jIP4fFx2SHfwkMoJiMFjUlMOIYhJKIT
8X7xX8Pgd9t/Z9/x5c3+yWZzmc9Xn04MkN8+Ouw2H4C79uLmtzDPmB4nroh5
9h2Qdo3vZk5FBm/gTl/DnOlqf6LTasCL1Wr9LPiw0GTQ/TPw6P6tpMdlGflZ
8cTO5z6n7Q4fjD9PKr95npAaXF1VUFZyreQmZnigY4nH8Q7ho/C3a2q1wN9m
t3Q1Ft66ehaH8s9Gn/wjK675WUFbWyVpcsJi2SX+thQdziU02vSN9OMPiy/W
l6XfzgrveV4iEbMtFsPu8u+ZZjAY+AvM3s4mXGoMBvVL5V+onuZ8YmshldRr
NBhdEdo+Ct9qs1mtziUmk4nNoDfUVlzFxqbEHk2MPJQW/fPl5F+zMcfyMiNG
+ttcaNb3AD+M735rtRjYDGp97b0cXHxafBA+4SghIeBCmF9U4I+o4B9SYw4k
nPOrf1Rqs+2I4HPc/Uq9utrS+CDrUvSl+BOp0YGJYf4xwftO+/908uDeiKN7
CRcO52aEZiQfaGm8bbH4cPDfcKzOfFihp9Nujg33Xccm4hJCctKiLpz1jz7l
hw7bFxOyPyzQL/LEfgL6SHl+1O3cswVZAYM9D22W/515u5VFR+4U5aTFBGHO
/1ZVkJKOOh51Yl9KlD829sDl5GPYpFP45Ki68vS2Omx1cWhZfjBpssOlK7tP
fCg6/Cxms0Ihn5+jdv5d/TvhPAEdlI8PK8AHV+RG5eFDcaiArOSgbPSR6yn+
efiT7fVFEwMV3Y2ZT8pjWx5n8vlUn/ggVwskztWXyWTPGuqK8rEXYwISIg4n
xhxHhQfGhQWgwg9m40IqCmNrS+MeFaMeFEd0NlyZJzdNDVUMtOa86vyTjvRo
des7ZsPh0Go1IsHy2EhfTWXBFWzsJXTkZVwanpCVhMaFRyaci0JhsWl3StJb
6/H9LZmj/TcYyFPG62dspJlJqp+j9MmlQp/nvU6no5BJ7c8bK+8Wlxbl1VSV
tjbV9PW0jo+NkhHk9RSp7nHj9dzCu5WVI0O9FKSLSmpgzjZz6e1LLKKA0yvm
DfI5r6QSjslkcPgqJp1Or66seNHSPEMmicRCk8kIg5Au2KRarVatVnO5C939
/S0vWhHqpETEkEuYKgVtTTarWkFWhJN83tSqdNlsMdkdvqTvcOj1Bo1G4+0Z
gjSbzZubm+vr6+BCp9etazYo9DcdbW2vRoe5HBZvkcblInw+RSjkqpRys8nk
uht3zDzsfudh6DoEwIC80WgEfKVSuQG2uWEwGZRK1czQEIMyMz1MZDIYK5KV
9Y0NoOHY3oauy/Hd6/I9Fb2d6bx9AFUqlQL+6urq1taWXCZTqFWCuTeyRS6P
NrNIIXvI2lyAbgS7bbvA0ALJ905RGIFaG1ymUCgkEolILBYKhXKFAqoAaRJL
hIuzyNaaen5qfG1VbHMC2vQ63SZE+NbUa2qIHZAhfOh4aMMIwAJVgJLL5eIV
yZJQPDE1PTo2QWOwFErlmnpNrlLwqVPShTmliM+eHIHCGU0mlXp9WbACk2dp
dBrjzbJQAMT0ej0QA7YefPetAV62tjRSqYQ1N49Q6JPIbEd3X//gMIs1x2Qy
kKmx4fam9vvlI+31PTUV073dPDaTzWBNk6lzXD6Hv0RlMkRSiUgkAhcCgQAI
e9Ll8eJWJhAWiCUiySp3cZnF5pDJMwgZmQUFj08Mv3zZ39rY9bSm9V5pT1UF
8UntCJHInF9YEopYnPmFxUUejweahxZw3LV+9xRylgYSpTcYoEJmi0Wr00Gt
gZLCWYi1TY1mTa2SSSVqhUzA5TIosxw2WyKVQmJBUSB16IAqYLJbXQ5f57Mn
Io/ePIPwCAshw9ACAYPRCEz0LoMRr285u7csPyBX70G7l1NP1Wxeu8v7s3Mn
/M9uXxT/XzWnqQ4=
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], "\[Rule]", "\<\"bird\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7716224133001747`*^9, 3.771650243623968*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"3f39a98f-038d-4352-ae30-ce1be84a72e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classes", "=", 
  RowBox[{"Union", "@", 
   RowBox[{"Values", "[", "trainingData", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771622388595293*^9, 3.7716223897721605`*^9}, {
  3.7716224294099817`*^9, 3.771622438641593*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"502e4487-a8b2-4200-a898-0583b81a9a65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"airplane\"\>", ",", "\<\"automobile\"\>", ",", "\<\"bird\"\>", 
   ",", "\<\"cat\"\>", ",", "\<\"deer\"\>", ",", "\<\"dog\"\>", 
   ",", "\<\"frog\"\>", ",", "\<\"horse\"\>", ",", "\<\"ship\"\>", 
   ",", "\<\"truck\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771622434693322*^9, 3.771650472965725*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"c736cb8b-e1d1-48ca-a957-476363926450"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"module", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"20", ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", "1"}]}], "]"}]}], "}"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"net", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"module", ",", "module", ",", 
         RowBox[{"FlattenLayer", "[", "]"}], ",", "200", ",", "Ramp", ",", 
         "10", ",", 
         RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"NetEncoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Image\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"32", ",", "32"}], "}"}]}], "}"}], "]"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.771622441411823*^9, 3.771622471988864*^9}, {
  3.771622581639807*^9, 3.771622657027396*^9}, {3.77162270586837*^9, 
  3.7716227076939287`*^9}, {3.771650584369234*^9, 3.771650593167163*^9}, {
  3.7716508553056574`*^9, 3.77165087973717*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"e0fa598d-4228-4fd9-9c6e-168b5258e923"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "trained"}], "}"}], "=", 
   RowBox[{"AbsoluteTiming", "@", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"net", ",", "trainingData", ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "2"}], ",", 
      RowBox[{"TrainingProgressReporting", "->", "\"\<Panel\>\""}]}], 
     "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7716508137034955`*^9, 3.7716508149496903`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"614160dc-b742-4226-9ea1-5d8eb5a9b1a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"time", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.77162547098977*^9, 3.7716254719899387`*^9}, {
  3.7716508347415133`*^9, 3.771650836869527*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"0a60a23f-77e7-491a-b52b-b0ed47b55e90"],

Cell[BoxData["8.6043432`"], "Output",
 CellChangeTimes->{
  3.7716508373212824`*^9, {3.7716508708254347`*^9, 3.7716508959963055`*^9}},
 CellLabel->"Out[55]=",ExpressionUUID->"acde2ebe-5aea-43b3-aee6-6309292c33cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"100", ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", "300", 
      ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", "400", 
      ",", "Ramp", ",", "90"}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"80", ",", "80"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7716237917509127`*^9, 3.7716239000662804`*^9}, {
   3.7716241328985887`*^9, 3.771624135611453*^9}, {3.7716241752699556`*^9, 
   3.7716242076324463`*^9}, {3.771624244763156*^9, 3.771624253630853*^9}, {
   3.771624293057647*^9, 3.7716242933959475`*^9}, {3.771625697927664*^9, 
   3.771625702158574*^9}, {3.771625786069286*^9, 3.771625786453271*^9}, {
   3.7716258927701645`*^9, 3.7716259346460934`*^9}, {3.771625993747929*^9, 
   3.7716260133229*^9}, {3.7716262235310497`*^9, 3.771626225037425*^9}, 
   3.7716266724921274`*^9},
 CellLabel->
  "In[346]:=",ExpressionUUID->"9a34edd7-f471-4275-ac98-251e8ac4f898"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"80\"", "\"80\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"90\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{100, 6400}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 6400, "$InputDimensions" -> {80, 80}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 80}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 100, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{300, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {300}, "$OutputSize" -> 300, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 300, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]]], 
                    "6" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]]], 
                    "7" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{400, 300}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {400}, "$OutputSize" -> 400, 
                    "$InputSize" -> 300, "$InputDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{300}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {400}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{90, 400}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{90}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {90}, "$OutputSize" -> 90, 
                    "$InputSize" -> 400, "$InputDimensions" -> {400}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{90}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 80}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{90}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"80\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"90\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"90\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.77162383593299*^9, {3.771623876154725*^9, 3.771623901662527*^9}, 
   3.7716241362246127`*^9, {3.771624197174858*^9, 3.7716242079616375`*^9}, 
   3.7716242542826147`*^9, 3.771624293630372*^9, 3.7716257033772955`*^9, 
   3.7716257871332293`*^9, 3.771625853827315*^9, {3.7716258950752077`*^9, 
   3.7716259352275753`*^9}, {3.771626003500185*^9, 3.7716260137328644`*^9}, 
   3.7716266739916687`*^9},
 CellLabel->
  "Out[346]=",ExpressionUUID->"e2b3f8f0-370c-44d4-bed9-d03098e72c74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"convNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"16", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"32", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"10", ",", "3"}], "]"}], ",", 
      RowBox[{"AggregationLayer", "[", "Max", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"50", ",", "50"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7716237917509127`*^9, 3.7716239000662804`*^9}, {
  3.7716241328985887`*^9, 3.771624135611453*^9}, {3.7716241752699556`*^9, 
  3.7716242348011184`*^9}, {3.771624280923845*^9, 3.7716243983736753`*^9}, {
  3.7716244653621545`*^9, 3.771624467949789*^9}, {3.7716245112285995`*^9, 
  3.7716245225052743`*^9}, {3.771624571808448*^9, 3.7716245803098373`*^9}, {
  3.7716252878835764`*^9, 3.771625290850191*^9}, {3.7716253832696657`*^9, 
  3.771625385114752*^9}},
 CellLabel->
  "In[288]:=",ExpressionUUID->"df644465-8c81-437c-9a1e-ccdc42616faa"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"50\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 50, 3}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {{0, 0}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$InputSize" -> {50}, "$OutputSize" -> {48}, 
                    "$WeightsInputChannels" -> 50], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 48}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, "$SpatialDimensions" -> {48}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 48}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 48}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 48}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {{0, 0}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$InputSize" -> {48}, "$OutputSize" -> {46}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 48}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 46}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, "$SpatialDimensions" -> {46}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 46}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 46}, NeuralNetworks`RealT]]], 
                    "6" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 46}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 46}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 46}, NeuralNetworks`RealT]]], 
                    "7" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {{0, 0}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$InputSize" -> {46}, "$OutputSize" -> {44}, 
                    "$WeightsInputChannels" -> 32], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 46}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 44}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, "$SpatialDimensions" -> {44}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 44}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 44}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 44}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 44}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 44}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 64, 3}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 10, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {{0, 0}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$InputSize" -> {44}, "$OutputSize" -> {42}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 44}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 42}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 42}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"48\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"48\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"48\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"46\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"46\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"46\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"44\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"44\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"44\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"42\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.771624282264991*^9, {3.7716243602052126`*^9, 3.771624420499694*^9}, 
   3.7716244684505005`*^9, 3.77162452343962*^9, {3.7716245727442007`*^9, 
   3.7716245846310883`*^9}, 3.77162529191613*^9, 3.7716253868819413`*^9},
 CellLabel->
  "Out[288]=",ExpressionUUID->"d35335cf-4343-480a-ad8a-01cedde9d9d0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"1", ",", 
        RowBox[{"{", 
         RowBox[{"1000", ",", "80", ",", "80"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "20"}], ",", "20"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1000", ",", "90"}], "}"}]}], "]"}]}]}], "|>"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771623916759206*^9, 3.771623994071512*^9}, {
  3.7716240340579767`*^9, 3.7716240376294527`*^9}, {3.7716242572734113`*^9, 
  3.7716242579102125`*^9}, {3.7716257443783584`*^9, 3.7716258452772965`*^9}, {
  3.7716259701158*^9, 3.7716259702204885`*^9}, {3.771626026087536*^9, 
  3.771626041016215*^9}, {3.7716267317246075`*^9, 3.77162675352273*^9}},
 CellLabel->
  "In[350]:=",ExpressionUUID->"349694e8-66c3-4758-8574-21cfc47bdc82"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "trained"}], "}"}], "=", 
   RowBox[{"AbsoluteTiming", "@", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"net", ",", "trainingData", ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "120"}], ",", 
      RowBox[{"TrainingProgressReporting", "->", "\"\<Panel\>\""}]}], 
     "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7716224827458444`*^9, 3.7716224827528553`*^9}, {
  3.771624051124509*^9, 3.771624093694867*^9}, {3.771626580459488*^9, 
  3.771626611369112*^9}, {3.771626654440237*^9, 3.7716266547428885`*^9}, {
  3.771626724657234*^9, 3.7716267251978464`*^9}},
 CellLabel->
  "In[355]:=",ExpressionUUID->"f875b2df-ce91-4e78-9f6f-ed1b177a635b"],

Cell[CellGroupData[{

Cell[BoxData["time"], "Input",
 CellChangeTimes->{{3.771624145729514*^9, 3.771624146306312*^9}},
 CellLabel->
  "In[345]:=",ExpressionUUID->"4830dfdc-2eae-432b-a90f-3f54620a6583"],

Cell[BoxData["5.1210295`"], "Output",
 CellChangeTimes->{3.771624146781703*^9, 3.7716242139619017`*^9, 
  3.7716242669208164`*^9, 3.7716244267482758`*^9, 3.7716257529898605`*^9, 
  3.771625805775402*^9, 3.7716258659353333`*^9, 3.7716259789931965`*^9, 
  3.771626051607647*^9, 3.771626604718547*^9, 3.771626648899655*^9},
 CellLabel->
  "Out[345]=",ExpressionUUID->"919d2cce-0777-4590-8ff9-dc1e789d5b30"]
}, Open  ]],

Cell[BoxData["DialogInput"], "Input",
 CellChangeTimes->{{3.7716279951635733`*^9, 
  3.77162800489047*^9}},ExpressionUUID->"b3926ed4-f328-4991-a0c8-\
c1f28daa63bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "trained"}], "}"}], "=", 
   RowBox[{"AbsoluteTiming", "@", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"net", ",", "trainingData", ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<CPU\>\""}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "100"}], ",", 
      RowBox[{"TrainingProgressReporting", "\[Rule]", "None"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7716224827458444`*^9, 3.7716224827528553`*^9}, {
  3.771624051124509*^9, 3.7716241082033567`*^9}},
 CellLabel->
  "In[343]:=",ExpressionUUID->"6e9d762e-e64f-4c15-aeb7-05f02768827c"],

Cell[CellGroupData[{

Cell[BoxData["time"], "Input",
 CellChangeTimes->{{3.771622442416709*^9, 3.7716224426885633`*^9}, {
  3.7716229248346343`*^9, 3.7716229306354895`*^9}},
 CellLabel->
  "In[263]:=",ExpressionUUID->"3ee3002e-88c2-453f-bc36-611c454752f0"],

Cell[BoxData["2.2853337`"], "Output",
 CellChangeTimes->{
  3.771622926096838*^9, 3.77162402623323*^9, {3.771624068146975*^9, 
   3.771624115511367*^9}, 3.771624150528714*^9, 3.7716242170208845`*^9, 
   3.771624271361705*^9, 3.7716244306480045`*^9},
 CellLabel->
  "Out[263]=",ExpressionUUID->"d057407e-b7d7-4744-b251-4124f58bfa97"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ConvNet", "Subsubsection",
 CellChangeTimes->{{3.771624451309636*^9, 
  3.771624452769578*^9}},ExpressionUUID->"7cefe70e-36f3-49a8-b05c-\
17caff05cddf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "trained"}], "}"}], "=", 
   RowBox[{"AbsoluteTiming", "@", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"convNet", ",", "trainingData", ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "100"}], ",", 
      RowBox[{"TrainingProgressReporting", "\[Rule]", "None"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7716224827458444`*^9, 3.7716224827528553`*^9}, {
  3.771624051124509*^9, 3.771624093694867*^9}, {3.7716244577953978`*^9, 
  3.771624475371616*^9}, {3.7716245948814964`*^9, 3.771624595611473*^9}, {
  3.7716253179547434`*^9, 3.7716253186489277`*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"7a0943be-838a-44c9-880f-47ea941d20ca"],

Cell[CellGroupData[{

Cell[BoxData["time"], "Input",
 CellChangeTimes->{{3.771624145729514*^9, 3.771624146306312*^9}},
 CellLabel->
  "In[290]:=",ExpressionUUID->"45500fb9-ff6d-4d77-bb48-af73b98f9b68"],

Cell[BoxData["3.0601061`"], "Output",
 CellChangeTimes->{
  3.771624146781703*^9, 3.7716242139619017`*^9, 3.7716242669208164`*^9, 
   3.7716244267482758`*^9, 3.7716244890254755`*^9, 3.7716245353732753`*^9, {
   3.7716245923145485`*^9, 3.7716245980596037`*^9}, 3.7716253006783705`*^9, 
   3.771625330977504*^9, 3.7716254089879894`*^9},
 CellLabel->
  "Out[290]=",ExpressionUUID->"c1a578b9-b761-4d2c-bd3e-85373ce8bb16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "trained"}], "}"}], "=", 
   RowBox[{"AbsoluteTiming", "@", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"convNet", ",", "trainingData", ",", 
      RowBox[{"TargetDevice", "\[Rule]", "\"\<CPU\>\""}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "100"}], ",", 
      RowBox[{"TrainingProgressReporting", "\[Rule]", "None"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7716224827458444`*^9, 3.7716224827528553`*^9}, {
   3.771624051124509*^9, 3.7716241082033567`*^9}, 3.77162448432085*^9, {
   3.7716246049787674`*^9, 3.771624605478436*^9}, {3.771625364723298*^9, 
   3.771625365384529*^9}},
 CellLabel->
  "In[338]:=",ExpressionUUID->"ae882364-1d5d-4136-93e2-f46b766bbc68"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain","invindim3",
   "\"Data provided to port \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Input\\\\\\\"\\\"}]\\)\\\" should be \
\\!\\(\\*RowBox[{\\\"\\\\\\\"a non-empty list of 50\[Times]50 matrices of \
real numbers\\\\\\\"\\\"}]\\), but was \\!\\(\\*RowBox[{\\\"\\\\\\\"a 800\
\[Times]80\[Times]80 array of real numbers\\\\\\\"\\\"}]\\).\"",2,338,64,
   27066475601768149323,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771626557047221*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[338]:=",ExpressionUUID->"9ad61a14-5f82-45ce-\
b74b-3ffb4c93f3ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["time"], "Input",
 CellChangeTimes->{{3.771622442416709*^9, 3.7716224426885633`*^9}, {
  3.7716229248346343`*^9, 3.7716229306354895`*^9}},
 CellLabel->
  "In[286]:=",ExpressionUUID->"b9007b67-efd9-4f63-a6bb-2fd34f1a713a"],

Cell[BoxData["2.9214358`"], "Output",
 CellChangeTimes->{3.771624623324927*^9, 3.7716253337541304`*^9},
 CellLabel->
  "Out[286]=",ExpressionUUID->"c97e6cf8-81ba-4ccb-81e9-8e3bb9368fd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{3.771622442961788*^9, 3.7716230913676753`*^9},
 CellLabel->
  "In[215]:=",ExpressionUUID->"ffb77fc0-b456-453f-91c1-d1ad3efbf0c9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["9", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {23., {0., 23.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{100, 3, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 100, 
                    "$SpatialDimensions" -> {30, 30}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100, 30, 30}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 100, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{100, 100, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 100, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    100], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 100, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 100, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{100, 100, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 100, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {26, 26}, "$WeightsInputChannels" -> 
                    100], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 100, 
                    "$SpatialDimensions" -> {26, 26}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100, 26, 26}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 100, "$InputSize" -> {26, 26}, 
                    "$OutputSize" -> {26, 26}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{100, 100, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 100, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 100, "$InputSize" -> {26, 26}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 
                    100], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{100}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{100}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 100, 
                    "$SpatialDimensions" -> {24, 24}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100, 24, 24}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 100, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {24, 24}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 26, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]]], 
                    "6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{250, 57600}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{250}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {250}, "$OutputSize" -> 250, 
                    "$InputSize" -> 57600, "$InputDimensions" -> {57600}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{57600}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{250}, NeuralNetworks`RealT]]], 
                    "7" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {250}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{250}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{250}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 250}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 250, "$InputDimensions" -> {250}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{250}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"airplane\"", "\"automobile\"", 
                    Skeleton[7], "\"truck\""}, "InputDepth" -> 1, 
                    "Dimensions" -> 10, "$Rank" -> 0, "$Version" -> 
                    "12.0.10"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"32\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"26\"", "\"26\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"57600\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"250\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"250\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {538., {188., 200.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771623092201478*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"89954366-d8f1-48a4-a1cb-b72e035c956f"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.771622443151999*^9},ExpressionUUID->"fde43e73-b635-4281-a8ce-\
6602caaeb6d0"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.7716224433255367`*^9},ExpressionUUID->"a9a7864c-e4ba-483f-94be-\
e4bb7f143fa3"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.771622443431876*^9},ExpressionUUID->"2d7ca895-c717-4c19-86ba-\
98cec45d66c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"in", "=", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"1", ",", "200"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"net", "=", 
    RowBox[{"NetInitialize", "[", 
     RowBox[{"LinearLayer", "[", 
      RowBox[{"500", ",", " ", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "200"}]}], "]"}], "]"}]}], 
   "\n", 
   TagBox[
    TemplateBox[{RowBox[{
        StyleBox[
         TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                GridBox[{{
                   StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, BaselinePosition -> Automatic, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridFrameMargins -> {{0, 0}, {0, 0}}, 
              BaselinePosition -> {1, 3}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    RGBColor[0.33, 0.33, 0.33], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    
                    TemplateBox[{"\"Output dimensions\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   StyleBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"500\""}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Arrays", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"500\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridFrameMargins -> {{0, 0}, {0, 0}}, 
              BaselinePosition -> {1, 3}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("LinearLayer[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], "\n", 
   RowBox[{"Get", "[", "\"\<MXNetLink`\>\"", "]"}], "\n", "MXNetLink`$HasGPU",
    "\n", "$MXGPUEnabledQ", "\n", "False", "\n", 
   RowBox[{"?", 
    RowBox[{"*", "`", "*", "GPU", "*", "\[IndentingNewLine]", "\n", 
     StyleBox[
      FrameBox[GridBox[{
         {
          DynamicModuleBox[{Typeset`open$$ = True}, 
           PaneSelectorBox[{False->
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "RightPointerOpener"]], " ", 
              StyleBox["Image`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
             Evaluator->Automatic,
             Method->"Preemptive"], True->
            PaneBox[GridBox[{
               {
                ButtonBox[
                 RowBox[{
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "DownPointerOpener"],
                   ImageSizeCache->{19., {5., 14.}}], " ", 
                  StyleBox["Image`", "InformationGridGroupHeader"]}],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
                 Evaluator->Automatic,
                 Method->"Preemptive"]},
               {
                PaneBox[GridBox[{
                   {
                    ButtonBox[
                    StyleBox["GPUEnabledQ", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "GPUEnabledQ", "Image`"}, False},
                    ButtonNote->"Image`",
                    Evaluator->Automatic]}
                  },
                  DefaultBaseStyle->"Text",
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                  GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.95]}}}],
                 ImageMargins->{{10, 0}, {0, 2}}]}
              },
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
             FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
            ImageSize->Automatic]]},
         {
          DynamicModuleBox[{Typeset`open$$ = True}, 
           PaneSelectorBox[{False->
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "RightPointerOpener"]], " ", 
              StyleBox["MXNetLink`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
             Evaluator->Automatic,
             Method->"Preemptive"], True->
            PaneBox[GridBox[{
               {
                ButtonBox[
                 RowBox[{
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "DownPointerOpener"],
                   ImageSizeCache->{19., {5., 14.}}], " ", 
                  StyleBox["MXNetLink`", "InformationGridGroupHeader"]}],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
                 Evaluator->Automatic,
                 Method->"Preemptive"]},
               {
                PaneBox[GridBox[{
                   {
                    ButtonBox[
                    
                    StyleBox["GetGPUMemoryInformation", 
                    "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "GetGPUMemoryInformation", "MXNetLink`"}, False},
                    ButtonNote->"MXNetLink`",
                    Evaluator->Automatic], 
                    ButtonBox[
                    StyleBox["$HasGPU", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "$HasGPU", "MXNetLink`"}, False},
                    ButtonNote->"MXNetLink`",
                    Evaluator->Automatic]},
                   {
                    ButtonBox[
                    StyleBox["$GPUCount", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "$GPUCount", "MXNetLink`"}, False},
                    ButtonNote->"MXNetLink`",
                    Evaluator->Automatic], 
                    ButtonBox[
                    StyleBox["$MXGPUEnabledQ", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "$MXGPUEnabledQ", "MXNetLink`"}, False},
                    ButtonNote->"MXNetLink`",
                    Evaluator->Automatic]}
                  },
                  DefaultBaseStyle->"Text",
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                  GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.475]}}}],
                 ImageMargins->{{10, 0}, {0, 2}}]}
              },
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
             FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
            ImageSize->Automatic]]},
         {
          DynamicModuleBox[{Typeset`open$$ = True}, 
           PaneSelectorBox[{False->
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "RightPointerOpener"],
               ImageSizeCache->{15., {3., 12.}}], " ", 
              
              StyleBox["MXNetLink`GPU`PackagePrivate`", 
               "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
             Evaluator->Automatic,
             Method->"Preemptive"], True->
            PaneBox[GridBox[{
               {
                ButtonBox[
                 RowBox[{
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "DownPointerOpener"],
                   ImageSizeCache->{19., {5., 14.}}], " ", 
                  
                  StyleBox["MXNetLink`GPU`PackagePrivate`", 
                   "InformationGridGroupHeader"]}],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
                 Evaluator->Automatic,
                 Method->"Preemptive"]},
               {
                PaneBox[GridBox[{
                   {
                    ButtonBox[
                    
                    StyleBox["getGPUToolsMajorMinorRev", 
                    "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "getGPUToolsMajorMinorRev", 
                    "MXNetLink`GPU`PackagePrivate`"}, False},
                    ButtonNote->"MXNetLink`GPU`PackagePrivate`",
                    Evaluator->Automatic]},
                   {
                    ButtonBox[
                    StyleBox["hasGPU", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "hasGPU", "MXNetLink`GPU`PackagePrivate`"}, False},
                    ButtonNote->"MXNetLink`GPU`PackagePrivate`",
                    Evaluator->Automatic]},
                   {
                    ButtonBox[
                    StyleBox["mxlMXGetGPUCount", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "mxlMXGetGPUCount", "MXNetLink`GPU`PackagePrivate`"}, 
                    False},
                    ButtonNote->"MXNetLink`GPU`PackagePrivate`",
                    Evaluator->Automatic]},
                   {
                    ButtonBox[
                    
                    StyleBox["mxlMXGetGPUMemoryInformation", 
                    "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "mxlMXGetGPUMemoryInformation", 
                    "MXNetLink`GPU`PackagePrivate`"}, False},
                    ButtonNote->"MXNetLink`GPU`PackagePrivate`",
                    Evaluator->Automatic]}
                  },
                  DefaultBaseStyle->"Text",
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                  GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.95]}}}],
                 ImageMargins->{{10, 0}, {0, 2}}]}
              },
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
             FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
            ImageSize->Automatic]]},
         {
          DynamicModuleBox[{Typeset`open$$ = True}, 
           PaneSelectorBox[{False->
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "RightPointerOpener"],
               ImageSizeCache->{18., {4., 14.}}], " ", 
              
              StyleBox["NeuralNetworks`Private`", 
               "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
             Evaluator->Automatic,
             Method->"Preemptive"], True->
            PaneBox[GridBox[{
               {
                ButtonBox[
                 RowBox[{
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "DownPointerOpener"],
                   ImageSizeCache->{19., {5., 14.}}], " ", 
                  StyleBox["NeuralNetworks`Private`", 
                   "InformationGridGroupHeader"]}],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
                 Evaluator->Automatic,
                 Method->"Preemptive"]},
               {
                PaneBox[GridBox[{
                   {
                    ButtonBox[
                    StyleBox["GetGPUInformation", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "GetGPUInformation", "NeuralNetworks`Private`"}, False},
                    ButtonNote->"NeuralNetworks`Private`",
                    Evaluator->Automatic]},
                   {
                    ButtonBox[
                    StyleBox["$GPUMode", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "$GPUMode", "NeuralNetworks`Private`"}, False},
                    ButtonNote->"NeuralNetworks`Private`",
                    Evaluator->Automatic]},
                   {
                    ButtonBox[
                    StyleBox["$reportGPUMemoryUsage", "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "$reportGPUMemoryUsage", "NeuralNetworks`Private`"}, 
                    False},
                    ButtonNote->"NeuralNetworks`Private`",
                    Evaluator->Automatic]}
                  },
                  DefaultBaseStyle->"Text",
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                  GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.95]}}}],
                 ImageMargins->{{10, 0}, {0, 2}}]}
              },
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
             FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
            ImageSize->Automatic]]},
         {
          DynamicModuleBox[{Typeset`open$$ = True}, 
           PaneSelectorBox[{False->
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "RightPointerOpener"]], " ", 
              
              StyleBox["NeuralNetworks`Private`NetTrain`", 
               "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
             Evaluator->Automatic,
             Method->"Preemptive"], True->
            PaneBox[GridBox[{
               {
                ButtonBox[
                 RowBox[{
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "DownPointerOpener"],
                   ImageSizeCache->{19., {5., 14.}}], " ", 
                  
                  StyleBox["NeuralNetworks`Private`NetTrain`", 
                   "InformationGridGroupHeader"]}],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
                 Evaluator->Automatic,
                 Method->"Preemptive"]},
               {
                PaneBox[GridBox[{
                   {
                    ButtonBox[
                    
                    StyleBox["RateLimitedGPUInformation", 
                    "InformationGridButton"],
                    Appearance->None,
                    BaseStyle->"InformationGridLink",
                    
                    ButtonData:>{
                    "Info-4b9e2290-f989-4289-a014-8aa9c0799306", {
                    "RateLimitedGPUInformation", 
                    "NeuralNetworks`Private`NetTrain`"}, False},
                    ButtonNote->"NeuralNetworks`Private`NetTrain`",
                    Evaluator->Automatic]}
                  },
                  DefaultBaseStyle->"Text",
                  
                  GridBoxAlignment->{
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                  GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.95]}}}],
                 ImageMargins->{{10, 0}, {0, 2}}]}
              },
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
             FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
            ImageSize->Automatic]]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{
         "ColumnsIndexed" -> {{False}}, 
          "RowsIndexed" -> {
           2 -> GrayLevel[0.85], 3 -> GrayLevel[0.85], 4 -> GrayLevel[0.85], 
            5 -> GrayLevel[0.85]}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.8]}, 
            Offset[0.2]}}],
       BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"net", "[", "in", "]"}], ";"}], "//", "AbsoluteTiming"}], "\n", 
   RowBox[{"{", 
    RowBox[{"0.0069521`", ",", "Null"}], "}"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"net", "[", 
      RowBox[{"in", ",", " ", 
       RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}], ";"}], "//", 
    "RepeatedTiming"}], "\n", 
   RowBox[{"{", 
    RowBox[{"0.0004262138135593218`2.", ",", "Null"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.771260221037122*^9, 3.7712602217402463`*^9}, 
   3.771602139945689*^9, 
   3.771626367831279*^9},ExpressionUUID->"3b3d57a1-ec00-4a1d-a988-\
5c5899cb9dc7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\"\<NeuralNetworks`Private`GetGPUInformation\>\"", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "NeuralNetworks`Private`GetGPUInformation", "[", "]"}], ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"TotalMemory\"\>", 
                    ",", "\<\"FreeMemory\"\>"}], "}"}], ",", 
                    RowBox[{
                    "MXNetLink`GetGPUMemoryInformation", "[", 
                    "NeuralNetworks`Private`Misc`i", "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "NeuralNetworks`Private`Misc`i", ",", 
                    "MXNetLink`$GPUCount"}], "}"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"NeuralNetworks`Private`GetGPUInformation\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{19., {4., 15.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{19., {4., 15.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"NeuralNetworks`Private`GetGPUInformation\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "NeuralNetworks`Private`GetGPUInformation", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, NeuralNetworks`Private`GetGPUInformation, {
      NeuralNetworks`Private`GetGPUInformation[] :> Table[
         AssociationThread[{"TotalMemory", "FreeMemory"}, 
          MXNetLink`GetGPUMemoryInformation[NeuralNetworks`Private`Misc`i]], {
         NeuralNetworks`Private`Misc`i, MXNetLink`$GPUCount}]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "NeuralNetworks`Private`GetGPUInformation"], False]]], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.7716264132155046`*^9},
 CellTags->
  "Info-4b9e2290-f989-4289-a014-8aa9c0799306",ExpressionUUID->"54739f92-56c3-\
411a-b0c9-de4a7d437b34"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NeuralNetworks`Private`GetGPUInformation", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7716263899005327`*^9, 3.7716264431634617`*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"6505d31b-08bf-4b07-af15-9e9bce30efac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"TotalMemory\"\>", "\[Rule]", "3517421977"}], ",", 
    RowBox[{"\<\"FreeMemory\"\>", "\[Rule]", "8589934592"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7716134687722683`*^9, {3.7716263910346265`*^9, 3.7716264436282167`*^9}},
 CellLabel->
  "Out[337]=",ExpressionUUID->"d3c7b117-4cbb-4add-8c36-350669880482"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CUDALink`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771260222819356*^9, 3.77126022321527*^9}, {
  3.7716135345483875`*^9, 
  3.7716135452548923`*^9}},ExpressionUUID->"bc79b10c-f2cb-4500-86fc-\
131ce8faf883"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "src", "=", 
    "\"\<\n__global__ void mandelbrot_kernel(unsigned char * set, float zoom, \
float bailout, mint width, mint height) \n{\n   int xIndex = threadIdx.x + \
blockIdx.x*blockDim.x;\n   int yIndex = threadIdx.y + blockIdx.y*blockDim.y;\n\
   int k;\n\n   Real_t x0 = zoom*(width/3 - xIndex);\n   Real_t y0 = \
zoom*(height/2 - yIndex);\n   Real_t tmp, x = 0, y = 0;\n\n   if (xIndex < \
width && yIndex < height) {\n       for (k = 0; (x*x+y*y <= bailout) && (k < \
511); k++) {\n            tmp = x*x - y*y +x0;\n            y = 2*x*y + y0;\n \
           x = tmp;\n        };\n        set[xIndex + yIndex*width] = \
(unsigned char)(k/2);\n    }\n}\n\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7712602238146667`*^9, 3.771260224094917*^9}, 
   3.77161355233074*^9, 
   3.7716187116908307`*^9},ExpressionUUID->"0a46ba99-29bd-4446-a9dc-\
8a44de144062"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfun", ":=", 
   RowBox[{"CUDAFunctionLoad", "[", 
    RowBox[{"acc", ",", "\"\<mandelbrot_kernel\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Byte\>\"", ",", "_", ",", "\"\<Output\>\""}], "}"}], 
       ",", "\"\<Float\>\"", ",", "\"\<Float\>\"", ",", "_Integer", ",", 
       "_Integer"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"16", ",", "16"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7712602250084934`*^9, 3.771260225438325*^9}, 
   3.771613573391349*^9, {3.771618836247158*^9, 3.7716188369014077`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"1772d0e8-272f-4afc-a6e7-42800a9fb30c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"width", ",", "height"}], "}"}], "=", 
  RowBox[{"{", 
   RowBox[{"480", ",", "480"}], "}"}]}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"c22e5c0b-0f00-4151-ac03-c8ffda37b8e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"480", ",", "480"}], "}"}]], "Output",
 CellChangeTimes->{3.771613581240596*^9, 3.771618842171432*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"371f287e-a69f-4d46-b8d2-e729640eff9b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mset", "=", 
   RowBox[{"CUDAMemoryAllocate", "[", 
    RowBox[{"\"\<UnsignedByte\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"height", ",", "width"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[85]:=",ExpressionUUID->"cc60ef8a-5a16-429d-949c-9a3d1688d1e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"res", "=", 
    RowBox[{"mfun", "[", 
     RowBox[{
     "mset", ",", "0.005", ",", "8.0", ",", "width", ",", "height", ",", 
      RowBox[{"{", 
       RowBox[{"width", ",", "height"}], "}"}]}], "]"}]}], ";"}], "//", 
  "RepeatedTiming"}]], "Input",
 CellChangeTimes->{{3.771613611124261*^9, 3.771613611134234*^9}, {
  3.7716136777767897`*^9, 3.7716136809206057`*^9}, {3.7716140077388544`*^9, 
  3.7716140107385044`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"c6f4b062-785f-426d-a94e-57aa59085ede"],

Cell[BoxData[
 TemplateBox[{
  "CUDAFunctionLoad","invprog","\"CUDALink encountered an invalid program.\"",
   2,86,13,27066475601768149323,"Local","CUDALink`CUDAFunctionLoad"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7716188445686426`*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[86]:=",ExpressionUUID->"34cdb361-c35f-4a6e-ac25-\
cd00ea6c0e43"],

Cell[BoxData[
 TemplateBox[{
  "CUDAFunctionLoad","invprog","\"CUDALink encountered an invalid program.\"",
   2,86,14,27066475601768149323,"Local","CUDALink`CUDAFunctionLoad"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7716188445816083`*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[86]:=",ExpressionUUID->"bcb6a9d2-f204-4c6d-953f-\
e63c3c9da7e2"],

Cell[BoxData[
 TemplateBox[{
  "CUDAFunctionLoad","invprog","\"CUDALink encountered an invalid program.\"",
   2,86,15,27066475601768149323,"Local","CUDALink`CUDAFunctionLoad"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7716188445895867`*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[86]:=",ExpressionUUID->"d2b3de50-dd88-41e5-be38-\
87a7e8422bde"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"CUDAFunctionLoad\\\", \
\\\"::\\\", \\\"invprog\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,86,16,27066475601768149323,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771618844598597*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[86]:=",ExpressionUUID->"defda31c-d811-4d90-9936-\
dec74e72aef1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0000381453129866085`2.", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.771613990300209*^9, 3.7716140121609583`*^9}, 
   3.7716188450341654`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"9eebed90-719c-46f7-9dbb-ef9a12b2ead2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"CUDAMemoryGet", "[", 
    RowBox[{"First", "[", "res", "]"}], "]"}], ",", "\"\<Bit\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"0edd9a44-c20c-4e4f-9b00-df53ef7e8afe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "acc", "=", 
    "\"\<__global__ void Prime(mint end)\n\nint n = threadIdx.x + \
blockIdx.x*blockDim.x;\nInt64 start=11;\nInt64 end;\nfor \
(n=start;n<start+end;n+=2)\n{end=Math.Sqrt(n);\[IndentingNewLine]for (Int64 \
i=2;i\[LessEqual]end;i+=2) {if ((n % i)\[Equal]0) break;\[IndentingNewLine]if \
(i\[Equal]end) isPrime(n);}\n\>\""}], ";"}], "\n"}]], "Input",
 CellChangeTimes->{{3.7716189963414106`*^9, 3.7716190088685794`*^9}, {
   3.771619186551178*^9, 3.7716192274093037`*^9}, {3.771619297774334*^9, 
   3.7716193007775607`*^9}, {3.7716194259517174`*^9, 3.771619435399528*^9}, {
   3.7716197122439747`*^9, 3.771619712642681*^9}, 3.771619745151123*^9, {
   3.771619780296976*^9, 3.771619788609768*^9}, {3.771619839345333*^9, 
   3.7716198633026195`*^9}, 3.7716216657024565`*^9, {3.771624981518462*^9, 
   3.77162500530954*^9}, 
   3.7716252145343723`*^9},ExpressionUUID->"2fedac65-e847-4357-828d-\
c28c09afeebe"],

Cell[BoxData[
 RowBox[{"add", ":=", 
  RowBox[{"CUDAFunctionLoad", "[", 
   RowBox[{"acc", ",", "\"\<Prime\>\"", ",", 
    RowBox[{"{", "321", "}"}], ",", "256"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7716190295069256`*^9, 3.771619042428557*^9}, {
  3.7716190800494695`*^9, 3.771619095287675*^9}, {3.7716193052922363`*^9, 
  3.7716193086101465`*^9}, {3.771619390844259*^9, 3.7716193914027343`*^9}, {
  3.771621651941887*^9, 3.7716216560345774`*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"bfe672a4-49b2-40f4-80c3-d1eaa1b5bfac"],

Cell[CellGroupData[{

Cell[BoxData["add"], "Input",
 CellChangeTimes->{{3.771619395992428*^9, 3.771619396324543*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"0bee5409-1824-4fd9-a4d8-c3c7a36fe2c2"],

Cell[BoxData[
 TemplateBox[{
  "CUDAFunctionLoad","cmperr",
   "\"-- Message text not found -- (\\!\\(\\*RowBox[{\\\"\\\\\\\"C:\\\\\\\\\\\
\\\\\\Users\\\\\\\\\\\\\\\\dali7\\\\\\\\\\\\\\\\AppData\\\\\\\\\\\\\\\\\
Roaming\\\\\\\\\\\\\\\\Mathematica\\\\\\\\\\\\\\\\Paclets\\\\\\\\\\\\\\\\\
Repository\\\\\\\\\\\\\\\\CUDA\\\\\\\"\\\", \\\"\[Ellipsis]\\\", \
\\\"\\\\\\\".0.359\\\\\\\\\\\\\\\\CUDAToolkit\\\\\\\\\\\\\\\\bin/../include\\\
\\\\\\\\\\\\\\cuda.h(55): error: expected a \\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\"\
\\\\\\\"\\\"}]\\))\"",2,148,47,27066475601768149323,"Local",
   "CUDALink`CUDAFunctionLoad"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7716193996567526`*^9, 3.771619459988589*^9, 
  3.7716197200067525`*^9, 3.7716198135990524`*^9, 3.7716198449386683`*^9, 
  3.7716216608696985`*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[148]:=",ExpressionUUID->"467179c1-7661-4530-\
90c3-64f51b894a64"],

Cell[BoxData[
 TemplateBox[{
  "CUDAFunctionLoad","cmperr",
   "\"-- Message text not found -- (\\!\\(\\*RowBox[{\\\"\\\\\\\"C:\\\\\\\\\\\
\\\\\\Users\\\\\\\\\\\\\\\\dali7\\\\\\\\\\\\\\\\AppData\\\\\\\\\\\\\\\\\
Roaming\\\\\\\\\\\\\\\\Mathematica\\\\\\\\\\\\\\\\Paclets\\\\\\\\\\\\\\\\\
Repository\\\\\\\\\\\\\\\\CUDA\\\\\\\"\\\", \\\"\[Ellipsis]\\\", \
\\\"\\\\\\\"../include\\\\\\\\\\\\\\\\cuda.h(435): error: identifier \\\\\\\\\
\\\\\\\"cuuint32_t\\\\\\\\\\\\\\\" is undefined\\\\\\\"\\\"}]\\))\"",2,148,48,
   27066475601768149323,"Local","CUDALink`CUDAFunctionLoad"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7716193996567526`*^9, 3.771619459988589*^9, 
  3.7716197200067525`*^9, 3.7716198135990524`*^9, 3.7716198449386683`*^9, 
  3.771621660933528*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[148]:=",ExpressionUUID->"371d2d68-ff8f-483f-\
9c69-98eac65a6d13"],

Cell[BoxData[
 TemplateBox[{
  "CUDAFunctionLoad","cmperr",
   "\"-- Message text not found -- (\\!\\(\\*RowBox[{\\\"\\\\\\\"C:\\\\\\\\\\\
\\\\\\Users\\\\\\\\\\\\\\\\dali7\\\\\\\\\\\\\\\\AppData\\\\\\\\\\\\\\\\\
Roaming\\\\\\\\\\\\\\\\Mathematica\\\\\\\\\\\\\\\\Paclets\\\\\\\\\\\\\\\\\
Repository\\\\\\\\\\\\\\\\CUDA\\\\\\\"\\\", \\\"\[Ellipsis]\\\", \
\\\"\\\\\\\"../include\\\\\\\\\\\\\\\\cuda.h(436): error: identifier \\\\\\\\\
\\\\\\\"cuuint64_t\\\\\\\\\\\\\\\" is undefined\\\\\\\"\\\"}]\\))\"",2,148,49,
   27066475601768149323,"Local","CUDALink`CUDAFunctionLoad"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7716193996567526`*^9, 3.771619459988589*^9, 
  3.7716197200067525`*^9, 3.7716198135990524`*^9, 3.7716198449386683`*^9, 
  3.771621660942503*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[148]:=",ExpressionUUID->"35caab4e-c90f-40fe-\
bab8-dbb52da80853"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"CUDAFunctionLoad\\\", \
\\\"::\\\", \\\"cmperr\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,148,50,27066475601768149323,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7716193996567526`*^9, 3.771619459988589*^9, 
  3.7716197200067525`*^9, 3.7716198135990524`*^9, 3.7716198449386683`*^9, 
  3.7716216609504824`*^9},
 CellLabel->
  "\:8a08\:7b97\:4e2d\:ff1aIn[148]:=",ExpressionUUID->"5d0b9d17-f310-4e61-\
81ab-33248f81404c"],

Cell[BoxData[
 RowBox[{"CUDAFunctionLoad", "[", 
  RowBox[{"\<\"__global__ void Prime(mint \
end)\\n#include<stdio.h>\\n#include<cuda.h>\\n#include<math.h>\\n\\nInt64 \
start=11;\\nInt64 end;\\nfor (Int64 \
n=start;n<start+end;n+=2)\\n{end=Math.Sqrt(n);\[IndentingNewLine]for (Int64 \
i=2;i\[LessEqual]end;i+=2) {if ((n % i)\[Equal]0) break;\[IndentingNewLine]if \
(i\[Equal]end) isPrime(n);}\\n\"\>", ",", "\<\"Prime\"\>", ",", 
   RowBox[{"{", "321", "}"}], ",", "256"}], "]"}]], "Output",
 CellChangeTimes->{3.7716193997635827`*^9, 3.7716194601307406`*^9, 
  3.771619720144385*^9, 3.771619813743733*^9, 3.771619845095248*^9, 
  3.771621661025282*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"aa7b6b9c-b83e-4c6f-bb68-53ad19f0c2ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CUDAQ", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7716201870195866`*^9, 3.7716201896921883`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"85fd1e6c-fa27-4902-8621-19487631ed93"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7716201901160717`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"befb3822-d2c5-4f04-860f-af9dc034ae4a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 988},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Magnification:>1.9 Inherited,
FrontEndVersion->"12.0 \:95dc\:65bc  Microsoft Windows (64-bit) (2019\:5e744\
\:67088\:65e5)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info-4b9e2290-f989-4289-a014-8aa9c0799306"->{
  Cell[306972, 6786, 10250, 255, 443, "Print",ExpressionUUID->"54739f92-56c3-411a-b0c9-de4a7d437b34",
   CellTags->"Info-4b9e2290-f989-4289-a014-8aa9c0799306"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info-4b9e2290-f989-4289-a014-8aa9c0799306", 330052, 7364}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 223, 3, 83, "Input",ExpressionUUID->"f76ab152-92cc-4b6e-9396-8afea16bbe9c"],
Cell[CellGroupData[{
Cell[806, 27, 208, 3, 54, "Input",ExpressionUUID->"00eeb7c6-fa00-4b2a-81f2-9b614331d6fc"],
Cell[1017, 32, 331, 7, 89, "Output",ExpressionUUID->"005eeac0-94d1-4ba9-9500-4cfbf5f190a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1385, 44, 230, 4, 195, "Section",ExpressionUUID->"df8a70f5-72b4-40bb-a0f7-ab877646edac"],
Cell[1618, 50, 616, 18, 500, "CodeText",ExpressionUUID->"78f61fd7-0e12-4a4b-9418-7fa1a0e5ae44"],
Cell[CellGroupData[{
Cell[2259, 72, 183, 2, 83, "Input",ExpressionUUID->"0cee8023-e313-464f-8bf8-02b426b13407"],
Cell[2445, 76, 186, 2, 62, "Output",ExpressionUUID->"ae4bcd55-b908-45ad-93e0-d09898a50d73"]
}, Open  ]],
Cell[2646, 81, 1959, 52, 402, "Code",ExpressionUUID->"4d0eb703-1a48-46d2-8abc-78de3609c6d1",
 InitializationCell->True],
Cell[4608, 135, 17171, 407, 1456, "Code",ExpressionUUID->"359f8fb7-2af2-412b-aec3-f34498817884"],
Cell[21782, 544, 464, 12, 95, "Code",ExpressionUUID->"92f0f4cb-9f24-4316-ab1d-1c3c0511100a"],
Cell[CellGroupData[{
Cell[22271, 560, 676, 17, 151, "Input",ExpressionUUID->"3062a4e5-2a1f-401a-b2c3-cc1ed298b0ff"],
Cell[22950, 579, 3579, 78, 448, "Output",ExpressionUUID->"df492004-9182-4fa6-9004-e4c089c392f9"]
}, Open  ]],
Cell[26544, 660, 3554, 83, 804, "Code",ExpressionUUID->"79562fd3-fdce-4665-a879-ab6ab5f3b429"],
Cell[CellGroupData[{
Cell[30123, 747, 180, 2, 54, "Input",ExpressionUUID->"ca45cf32-9001-4f7c-97be-ecaa2bba070c"],
Cell[30306, 751, 222, 3, 62, "Output",ExpressionUUID->"33b658c9-c09d-42a3-9e88-0b2b6b54e810"]
}, Open  ]],
Cell[30543, 757, 152, 3, 54, "Input",ExpressionUUID->"9a9a9d3c-6a5a-45a4-91da-2b14cc656a8f"],
Cell[30698, 762, 1448, 30, 648, "Input",ExpressionUUID->"137c0569-cf8e-42eb-b1c8-566f3ec907bd"],
Cell[CellGroupData[{
Cell[32171, 796, 450, 9, 388, "Input",ExpressionUUID->"f277cb55-7723-4dc5-b1ed-7d4be471560e"],
Cell[32624, 807, 192, 3, 62, "Output",ExpressionUUID->"58d1bdf3-153c-4ac6-9807-ea9192a4d0bd"]
}, Open  ]],
Cell[32831, 813, 738, 12, 869, "Input",ExpressionUUID->"b8577ba7-dd19-4b92-85e6-26fff0932410"],
Cell[CellGroupData[{
Cell[33594, 829, 483, 9, 134, "Input",ExpressionUUID->"e9aa8e40-0cfd-4c94-9645-c7f5f856ada3"],
Cell[34080, 840, 911, 19, 75, "Output",ExpressionUUID->"81358967-9bf8-477d-b261-1fff1f086ea1"]
}, Open  ]],
Cell[35006, 862, 1678, 31, 315, "Input",ExpressionUUID->"d33e8bcd-6332-454b-9cad-d39ce3b377ed"],
Cell[CellGroupData[{
Cell[36709, 897, 686, 13, 62, "Input",ExpressionUUID->"7e421172-2c9e-4d6e-871d-f078ec6b79d1"],
Cell[37398, 912, 371, 6, 51, "Output",ExpressionUUID->"8c226d19-56ee-4568-8b60-46746e352730"]
}, Open  ]],
Cell[37784, 921, 268, 4, 90, "Input",ExpressionUUID->"0f78b494-7f4b-42e7-aeae-e8c9e2eebe17"],
Cell[38055, 927, 736, 18, 62, "Input",ExpressionUUID->"94a4315d-0205-4ec2-8d32-5f1f83091796"],
Cell[38794, 947, 541, 15, 62, "Input",ExpressionUUID->"69575969-fe99-4e8d-8b40-d0e410445e68"],
Cell[CellGroupData[{
Cell[39360, 966, 792, 14, 43, "Input",ExpressionUUID->"d9f88141-9b3b-476f-a58c-88919c427a06"],
Cell[40155, 982, 592, 9, 51, "Output",ExpressionUUID->"fc54522b-1fe8-4e0b-bf8a-80699b15d2c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40784, 996, 490, 10, 43, "Input",ExpressionUUID->"f3b8aefa-c6e6-4537-a545-8b1af82d8022"],
Cell[41277, 1008, 375, 6, 51, "Output",ExpressionUUID->"a766118d-3222-4402-893a-abf02b5c0add"]
}, Open  ]],
Cell[41667, 1017, 364, 7, 43, "Input",ExpressionUUID->"d1d040fb-2670-43a5-9199-02f3d9e81600"],
Cell[42034, 1026, 219, 3, 90, "Input",ExpressionUUID->"7461f0eb-56c2-40bc-b715-f676404a9070"],
Cell[42256, 1031, 1496, 42, 197, "Input",ExpressionUUID->"e1e4e4b8-87b4-4cb1-9f61-f72cdad71c8e"],
Cell[CellGroupData[{
Cell[43777, 1077, 810, 21, 85, "Input",ExpressionUUID->"cb6f16db-3e14-402d-af87-4e668c1aab43"],
Cell[44590, 1100, 245, 4, 51, "Output",ExpressionUUID->"6d979ade-8e29-44bb-b4d7-081abd6463f6"]
}, Open  ]],
Cell[44850, 1107, 338, 5, 205, "Input",ExpressionUUID->"a31cb171-3e42-4284-ae22-7cf709619531"],
Cell[CellGroupData[{
Cell[45213, 1116, 1521, 36, 242, "Input",ExpressionUUID->"ca3bd94d-48f8-4941-be5d-c29fb3005693"],
Cell[46737, 1154, 402, 6, 51, "Output",ExpressionUUID->"eabcfc4e-4fd9-468d-b47b-2e989b8aecbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47176, 1165, 1207, 32, 242, "Input",ExpressionUUID->"261a3c06-ac08-4318-93ef-7b575a418db7"],
Cell[48386, 1199, 245, 4, 51, "Output",ExpressionUUID->"ef4d32b1-daf9-4209-bb17-096fb10ad657"]
}, Open  ]],
Cell[48646, 1206, 266, 4, 136, "Input",ExpressionUUID->"b723530e-16aa-4f22-8fa0-3c41048a9ec6"],
Cell[CellGroupData[{
Cell[48937, 1214, 1118, 29, 197, "Input",ExpressionUUID->"8753108f-772b-4ece-8c96-16f3286e3dfc"],
Cell[50058, 1245, 294, 5, 51, "Output",ExpressionUUID->"83b3a782-30c4-4695-8a85-a18675079e7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50389, 1255, 1170, 30, 197, "Input",ExpressionUUID->"017f3c14-02ea-4234-9648-d4eaa53fdbb9"],
Cell[51562, 1287, 275, 4, 51, "Output",ExpressionUUID->"d4520128-c8f2-41a9-bf84-52004afd7192"]
}, Open  ]],
Cell[51852, 1294, 389, 6, 205, "Input",ExpressionUUID->"9b509dd6-6bee-485c-85b1-0d3fc14ce038"],
Cell[CellGroupData[{
Cell[52266, 1304, 1038, 24, 152, "Input",ExpressionUUID->"2f5eeaa6-0be3-4ee1-b962-f2177c1680a8"],
Cell[53307, 1330, 321, 6, 51, "Output",ExpressionUUID->"51ffa49f-2602-4d08-a8c2-7a515702e4e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53665, 1341, 1170, 28, 336, "Input",ExpressionUUID->"4d6ab20e-aa56-4eef-ba08-d27524a702f4"],
Cell[54838, 1371, 253, 5, 51, "Output",ExpressionUUID->"7760851a-dce0-45c2-ad88-68846970fb88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55128, 1381, 834, 23, 152, "Input",ExpressionUUID->"f3f11280-93a4-4af2-9959-6f13629d64ab"],
Cell[55965, 1406, 196, 3, 51, "Output",ExpressionUUID->"c5ad7f36-3c8d-4473-b0f9-f488f4a13bd6"]
}, Open  ]],
Cell[56176, 1412, 3543, 72, 550, "Input",ExpressionUUID->"9f94d0b9-961e-48fc-bde9-84daa2c816d3"],
Cell[59722, 1486, 161, 2, 43, "Input",ExpressionUUID->"91a30ca9-df2f-4f87-a6c7-08f1062f8131"],
Cell[CellGroupData[{
Cell[59908, 1492, 1493, 37, 220, "Input",ExpressionUUID->"cda47f64-4107-4739-a226-123b4ac7aeb0"],
Cell[61404, 1531, 353, 6, 51, "Output",ExpressionUUID->"c7918d95-98b1-4f7d-8cf9-d178eefbf8e7"]
}, Open  ]],
Cell[61772, 1540, 291, 4, 159, "Input",ExpressionUUID->"4dbb4bac-83a0-483d-a556-2dbfbc072d35"],
Cell[CellGroupData[{
Cell[62088, 1548, 1371, 33, 271, "Input",ExpressionUUID->"4239a815-2ea5-4624-bb91-729878635a99"],
Cell[63462, 1583, 362, 7, 51, "Output",ExpressionUUID->"ed1480cf-7fef-440b-a277-f084272ffa47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63861, 1595, 1081, 29, 157, "Input",ExpressionUUID->"9a26762f-c0fd-407e-80c3-1001396b97d5"],
Cell[64945, 1626, 285, 6, 51, "Output",ExpressionUUID->"b5d5b29b-f9cb-4cb5-a498-c1e2054ba829"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[65279, 1638, 167, 3, 125, "Section",ExpressionUUID->"9ef919cc-f6e7-43a8-8ef4-621fbf8afc3c"],
Cell[65449, 1643, 6447, 125, 844, "Code",ExpressionUUID->"1667192e-3d4d-4c99-ba11-4d250411154c"],
Cell[CellGroupData[{
Cell[71921, 1772, 365, 5, 54, "Input",ExpressionUUID->"3355d387-8590-4078-a90e-eb80bff72619"],
Cell[72289, 1779, 644, 14, 83, "Output",ExpressionUUID->"5121271d-08b1-4a98-af52-f315388e0511"]
}, Open  ]],
Cell[72948, 1796, 1411, 31, 368, "Code",ExpressionUUID->"eaa385e2-81ff-4dd5-acc0-baf9b02d17f3"],
Cell[CellGroupData[{
Cell[74384, 1831, 202, 3, 54, "Input",ExpressionUUID->"526a1eeb-ecda-4aee-bb72-8ef9d7b7ac16"],
Cell[74589, 1836, 486, 9, 74, "Output",ExpressionUUID->"03315269-733c-4d5a-8159-7d95385a4e47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75112, 1850, 204, 4, 54, "Input",ExpressionUUID->"b8bf7eb0-d712-4152-af2d-0f7056b77435"],
Cell[75319, 1856, 274, 5, 62, "Output",ExpressionUUID->"aee6c4b8-7e1f-42cc-a977-6fbc78754088"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75630, 1866, 245, 4, 54, "Input",ExpressionUUID->"80b52537-a087-44fc-ac02-a8421a2e2f03"],
Cell[75878, 1872, 220, 3, 62, "Output",ExpressionUUID->"4f8601be-d517-46ea-9dbf-3fb0f6416896"]
}, Open  ]],
Cell[76113, 1878, 668, 14, 95, "Code",ExpressionUUID->"7c7c7763-0333-4d8e-b93e-f8bdad7f450d"],
Cell[CellGroupData[{
Cell[76806, 1896, 284, 4, 54, "Input",ExpressionUUID->"354ab39e-719d-4423-bec7-d924b24c8d60"],
Cell[77093, 1902, 342, 5, 62, "Output",ExpressionUUID->"ec350d09-c2d6-47da-a493-47f3140f5621"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77484, 1913, 163, 3, 125, "Section",ExpressionUUID->"c1357445-cd9a-405e-8a5c-774c47abae36"],
Cell[77650, 1918, 216, 3, 83, "Input",ExpressionUUID->"fe4d75d4-aba4-4a2f-9ca5-5e0938374092"],
Cell[77869, 1923, 3889, 79, 844, "Code",ExpressionUUID->"f9dd8be5-20e8-4049-aa44-102fed6bd4ee"],
Cell[81761, 2004, 804, 16, 95, "Code",ExpressionUUID->"7febdc9d-3f78-49ee-8b8e-a2b5d65e1c1d"],
Cell[CellGroupData[{
Cell[82590, 2024, 184, 2, 54, "Input",ExpressionUUID->"14669c4d-fcdf-430b-a28e-5db1580c086f"],
Cell[82777, 2028, 288, 4, 62, "Output",ExpressionUUID->"ac9aa1ba-54e6-4176-aff5-b63e23f7a669"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83102, 2037, 305, 5, 54, "Input",ExpressionUUID->"1a6be728-9199-4ed2-9dc2-4d32d857c219"],
Cell[83410, 2044, 905, 19, 121, "Output",ExpressionUUID->"4d3e9179-20c0-4db2-81ad-32139f46f842"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84352, 2068, 1096, 26, 251, "Input",ExpressionUUID->"7425e56c-7e8e-4d46-b0a6-3b32e11012d7"],
Cell[85451, 2096, 891, 21, 121, "Output",ExpressionUUID->"ae2f772a-9479-4c96-b351-1405a124b8cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86379, 2122, 223, 4, 54, "Input",ExpressionUUID->"24402e25-15a6-4841-9795-64172438893d"],
Cell[86605, 2128, 372, 9, 69, "Output",ExpressionUUID->"e0f8b19b-05c5-4da1-b38b-9e7df510e39d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87014, 2142, 323, 6, 83, "Input",ExpressionUUID->"5fadac5b-5c5e-4f5a-8718-a5312d92df7d"],
Cell[87340, 2150, 192, 3, 62, "Output",ExpressionUUID->"727bea0f-d9e3-44b9-ae87-88b101ac9828"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[87581, 2159, 209, 4, 125, "Section",ExpressionUUID->"0d9f8463-c263-4e37-be54-698f10709f02"],
Cell[87793, 2165, 10254, 234, 1956, "Code",ExpressionUUID->"998f59dc-5691-4c9c-8471-e6c19577f140"],
Cell[98050, 2401, 364, 10, 95, "Code",ExpressionUUID->"f3f57fe4-c37b-4fa1-a77e-110c58cf2c8a"],
Cell[98417, 2413, 1098, 25, 300, "Code",ExpressionUUID->"d9c42df7-cd2e-4a75-955a-9ea12a85c3ab"],
Cell[CellGroupData[{
Cell[99540, 2442, 183, 2, 54, "Input",ExpressionUUID->"f9bb36a2-c555-4163-a164-5f41ad08a929"],
Cell[99726, 2446, 168, 2, 118, "Output",ExpressionUUID->"4e6f58e9-37c7-4e51-8053-c9607b9a022f"]
}, Open  ]],
Cell[99909, 2451, 224, 4, 92, "Input",ExpressionUUID->"b59b21b9-7bf7-4940-8871-6d27bad30c3f"],
Cell[100136, 2457, 154, 3, 54, "Input",ExpressionUUID->"272fa20e-8bd2-4ddb-90a9-f8ad11728d7c"],
Cell[100293, 2462, 989, 26, 151, "Input",ExpressionUUID->"93d08971-1f53-4f67-b7c8-b40cbbc66a31"],
Cell[CellGroupData[{
Cell[101307, 2492, 401, 9, 83, "Input",ExpressionUUID->"28acafa5-809a-423d-9559-5211d34bac6a"],
Cell[101711, 2503, 445, 8, 62, "Output",ExpressionUUID->"2b02bff5-12b1-46a4-b4bf-6c6b898ac1a9"]
}, Open  ]],
Cell[102171, 2514, 234, 5, 166, "Input",ExpressionUUID->"71c75be7-ce3f-4c5e-8987-7f6f339c6881"],
Cell[CellGroupData[{
Cell[102430, 2523, 909, 20, 404, "Input",ExpressionUUID->"df834d58-b77f-4ed0-aa0a-a3f877d12f62"],
Cell[103342, 2545, 404, 7, 62, "Output",ExpressionUUID->"85dbf2c1-4874-4d8e-9603-12ddb0ab8d66"]
}, Open  ]],
Cell[103761, 2555, 149, 3, 92, "Input",ExpressionUUID->"e214fdd5-f290-42cb-a90b-7690367fa973"],
Cell[103913, 2560, 234, 5, 166, "Input",ExpressionUUID->"68baf39f-ea27-48de-a387-7cccdb4dd7f3"],
Cell[CellGroupData[{
Cell[104172, 2569, 887, 22, 287, "Input",ExpressionUUID->"a6b48a0a-9b9e-4ac6-a88c-9cc497755e49"],
Cell[105062, 2593, 360, 7, 62, "Output",ExpressionUUID->"025a429c-b214-4395-aa72-2e7baec6176e"]
}, Open  ]],
Cell[105437, 2603, 259, 5, 203, "Input",ExpressionUUID->"e1c0bab2-803c-4ac4-ba1e-82f5502911f4"],
Cell[CellGroupData[{
Cell[105721, 2612, 569, 13, 296, "Input",ExpressionUUID->"61339db7-bc82-4eae-b053-32aa01ce96c4"],
Cell[106293, 2627, 11663, 205, 96, "Output",ExpressionUUID->"3f39a98f-038d-4352-ae30-ce1be84a72e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117993, 2837, 325, 6, 83, "Input",ExpressionUUID->"502e4487-a8b2-4200-a898-0583b81a9a65"],
Cell[118321, 2845, 428, 7, 100, "Output",ExpressionUUID->"c736cb8b-e1d1-48ca-a957-476363926450"]
}, Open  ]],
Cell[118764, 2855, 1838, 44, 642, "Input",ExpressionUUID->"e0fa598d-4228-4fd9-9c6e-168b5258e923"],
Cell[120605, 2901, 590, 13, 256, "Input",ExpressionUUID->"614160dc-b742-4226-9ea1-5d8eb5a9b1a7"],
Cell[CellGroupData[{
Cell[121220, 2918, 432, 7, 351, "Input",ExpressionUUID->"0a60a23f-77e7-491a-b52b-b0ed47b55e90"],
Cell[121655, 2927, 213, 3, 62, "Output",ExpressionUUID->"acde2ebe-5aea-43b3-aee6-6309292c33cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121905, 2935, 1088, 22, 219, "Input",ExpressionUUID->"9a34edd7-f471-4275-ac98-251e8ac4f898"],
Cell[122996, 2959, 38399, 790, 161, "Output",ExpressionUUID->"e2b3f8f0-370c-44d4-bed9-d03098e72c74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161432, 3754, 1421, 29, 500, "Input",ExpressionUUID->"df644465-8c81-437c-9a1e-ccdc42616faa"],
Cell[162856, 3785, 44142, 898, 161, "Output",ExpressionUUID->"d35335cf-4343-480a-ad8a-01cedde9d9d0"]
}, Open  ]],
Cell[207013, 4686, 1023, 25, 188, "Input",ExpressionUUID->"349694e8-66c3-4758-8574-21cfc47bdc82"],
Cell[208039, 4713, 793, 17, 256, "Input",ExpressionUUID->"f875b2df-ce91-4e78-9f6f-ed1b177a635b"],
Cell[CellGroupData[{
Cell[208857, 4734, 179, 3, 54, "Input",ExpressionUUID->"4830dfdc-2eae-432b-a90f-3f54620a6583"],
Cell[209039, 4739, 403, 6, 62, "Output",ExpressionUUID->"919d2cce-0777-4590-8ff9-dc1e789d5b30"]
}, Open  ]],
Cell[209457, 4748, 164, 3, 83, "Input",ExpressionUUID->"b3926ed4-f328-4991-a0c8-c1f28daa63bc"],
Cell[209624, 4753, 640, 15, 256, "Input",ExpressionUUID->"6e9d762e-e64f-4c15-aeb7-05f02768827c"],
Cell[CellGroupData[{
Cell[210289, 4772, 234, 4, 54, "Input",ExpressionUUID->"3ee3002e-88c2-453f-bc36-611c454752f0"],
Cell[210526, 4778, 332, 6, 62, "Output",ExpressionUUID->"d057407e-b7d7-4744-b251-4124f58bfa97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210895, 4789, 158, 3, 83, "Subsubsection",ExpressionUUID->"7cefe70e-36f3-49a8-b05c-17caff05cddf"],
Cell[211056, 4794, 794, 17, 256, "Input",ExpressionUUID->"7a0943be-838a-44c9-880f-47ea941d20ca"],
Cell[CellGroupData[{
Cell[211875, 4815, 179, 3, 54, "Input",ExpressionUUID->"45500fb9-ff6d-4d77-bb48-af73b98f9b68"],
Cell[212057, 4820, 417, 7, 62, "Output",ExpressionUUID->"c1a578b9-b761-4d2c-bd3e-85373ce8bb16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212511, 4832, 768, 17, 256, "Input",ExpressionUUID->"ae882364-1d5d-4136-93e2-f46b766bbc68"],
Cell[213282, 4851, 607, 13, 109, "Message",ExpressionUUID->"9ad61a14-5f82-45ce-b74b-3ffb4c93f3ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213926, 4869, 234, 4, 54, "Input",ExpressionUUID->"b9007b67-efd9-4f63-a6bb-2fd34f1a713a"],
Cell[214163, 4875, 186, 3, 62, "Output",ExpressionUUID->"c97e6cf8-81ba-4ccb-81e9-8e3bb9368fd7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214386, 4883, 217, 4, 92, "Input",ExpressionUUID->"ffb77fc0-b456-453f-91c1-d1ad3efbf0c9"],
Cell[214606, 4889, 63573, 1221, 536, "Output",ExpressionUUID->"89954366-d8f1-48a4-a1cb-b72e035c956f"]
}, Open  ]],
Cell[278194, 6113, 147, 3, 92, "Input",ExpressionUUID->"fde43e73-b635-4281-a8ce-6602caaeb6d0"],
Cell[278344, 6118, 149, 3, 92, "Input",ExpressionUUID->"a9a7864c-e4ba-483f-94be-e4bb7f143fa3"],
Cell[278496, 6123, 147, 3, 92, "Input",ExpressionUUID->"2d7ca895-c717-4c19-86ba-98cec45d66c3"],
Cell[CellGroupData[{
Cell[278668, 6130, 28301, 654, 1959, "Input",ExpressionUUID->"3b3d57a1-ec00-4a1d-a988-5c5899cb9dc7"],
Cell[306972, 6786, 10250, 255, 443, "Print",ExpressionUUID->"54739f92-56c3-411a-b0c9-de4a7d437b34",
 CellTags->"Info-4b9e2290-f989-4289-a014-8aa9c0799306"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317259, 7046, 241, 4, 77, "Input",ExpressionUUID->"6505d31b-08bf-4b07-af15-9e9bce30efac"],
Cell[317503, 7052, 431, 10, 155, "Output",ExpressionUUID->"d3c7b117-4cbb-4add-8c36-350669880482"]
}, Open  ]],
Cell[317949, 7065, 252, 5, 83, "Input",ExpressionUUID->"bc79b10c-f2cb-4500-86fc-131ce8faf883"],
Cell[318204, 7072, 989, 18, 1054, "Input",ExpressionUUID->"0a46ba99-29bd-4446-a9dc-8a44de144062"],
Cell[319196, 7092, 783, 17, 309, "Input",ExpressionUUID->"1772d0e8-272f-4afc-a6e7-42800a9fb30c"],
Cell[CellGroupData[{
Cell[320004, 7113, 235, 6, 54, "Input",ExpressionUUID->"c22e5c0b-0f00-4151-ac03-c8ffda37b8e3"],
Cell[320242, 7121, 220, 4, 61, "Output",ExpressionUUID->"371f287e-a69f-4d46-b8d2-e729640eff9b"]
}, Open  ]],
Cell[320477, 7128, 301, 7, 54, "Input",ExpressionUUID->"cc60ef8a-5a16-429d-949c-9a3d1688d1e3"],
Cell[CellGroupData[{
Cell[320803, 7139, 548, 13, 121, "Input",ExpressionUUID->"c6f4b062-785f-426d-a94e-57aa59085ede"],
Cell[321354, 7154, 371, 8, 42, "Message",ExpressionUUID->"34cdb361-c35f-4a6e-ac25-cd00ea6c0e43"],
Cell[321728, 7164, 371, 8, 42, "Message",ExpressionUUID->"bcb6a9d2-f204-4c6d-953f-e63c3c9da7e2"],
Cell[322102, 7174, 371, 8, 42, "Message",ExpressionUUID->"d2b3de50-dd88-41e5-be38-87a7e8422bde"],
Cell[322476, 7184, 460, 10, 77, "Message",ExpressionUUID->"defda31c-d811-4d90-9936-dec74e72aef1"],
Cell[322939, 7196, 274, 5, 61, "Output",ExpressionUUID->"9eebed90-719c-46f7-9dbb-ef9a12b2ead2"]
}, Open  ]],
Cell[323228, 7204, 250, 6, 84, "Input",ExpressionUUID->"0edd9a44-c20c-4e4f-9b00-df53ef7e8afe"],
Cell[323481, 7212, 966, 18, 424, "Input",ExpressionUUID->"2fedac65-e847-4357-828d-c28c09afeebe"],
Cell[324450, 7232, 536, 10, 54, "Input",ExpressionUUID->"bfe672a4-49b2-40f4-80c3-d1eaa1b5bfac"],
Cell[CellGroupData[{
Cell[325011, 7246, 178, 3, 54, "Input",ExpressionUUID->"0bee5409-1824-4fd9-a4d8-c3c7a36fe2c2"],
Cell[325192, 7251, 924, 17, 110, "Message",ExpressionUUID->"467179c1-7661-4530-90c3-64f51b894a64"],
Cell[326119, 7270, 890, 16, 110, "Message",ExpressionUUID->"371d2d68-ff8f-483f-9c69-98eac65a6d13"],
Cell[327012, 7288, 890, 16, 110, "Message",ExpressionUUID->"35caab4e-c90f-40fe-bab8-dbb52da80853"],
Cell[327905, 7306, 587, 12, 77, "Message",ExpressionUUID->"5d0b9d17-f310-4e61-81ab-33248f81404c"],
Cell[328495, 7320, 736, 13, 491, "Output",ExpressionUUID->"aa7b6b9c-b83e-4c6f-bb68-53ad19f0c2ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[329268, 7338, 206, 4, 54, "Input",ExpressionUUID->"85fd1e6c-fa27-4902-8621-19487631ed93"],
Cell[329477, 7344, 158, 3, 84, "Output",ExpressionUUID->"befb3822-d2c5-4f04-860f-af9dc034ae4a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

